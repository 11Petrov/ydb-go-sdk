// Code generated by ydbgen; DO NOT EDIT.

package tests

import (
	"strconv"
	"time"

	"github.com/ydb-platform/ydb-go-sdk/v3/table"
	"github.com/ydb-platform/ydb-go-sdk/v3/table/resultset"
	"github.com/ydb-platform/ydb-go-sdk/v3/table/types"
)

var (
	_ = strconv.Itoa
	_ = time.Now
	_ = table.NewQueryParameters
	_ = resultset.Result.Scan
	_ = types.StringValue
)

func (o *Optional) Scan(res resultset.Result) (err error) {
	_ = res.ScanWithDefaults(&o.Int64, &o.Str, &o.Int32)
	return res.Err()
}

func (o *Optional) QueryParameters() *table.QueryParameters {
	var v0 types.Value
	{
		vp0 := types.OptionalValue(types.Int16Value(ydbConvI64ToI16(o.Int64)))
		v0 = vp0
	}
	var v1 types.Value
	{
		vp0 := types.StringValue([]uint8(o.Str))
		v1 = vp0
	}
	var v2 types.Value
	{
		vp0 := types.OptionalValue(types.Int32Value(o.Int32))
		v2 = vp0
	}
	return table.NewQueryParameters(
		table.ValueParam("$int64", v0),
		table.ValueParam("$str", v1),
		table.ValueParam("$int32", v2),
	)
}

func (o *Optional) StructValue() types.Value {
	var v0 types.Value
	{
		var v1 types.Value
		{
			vp0 := types.OptionalValue(types.Int16Value(ydbConvI64ToI16(o.Int64)))
			v1 = vp0
		}
		var v2 types.Value
		{
			vp0 := types.StringValue([]uint8(o.Str))
			v2 = vp0
		}
		var v3 types.Value
		{
			vp0 := types.OptionalValue(types.Int32Value(o.Int32))
			v3 = vp0
		}
		v0 = types.StructValue(
			types.StructFieldValue("int64", v1),
			types.StructFieldValue("str", v2),
			types.StructFieldValue("int32", v3),
		)
	}
	return v0
}

func (o *Optional) StructType() types.Type {
	var t0 types.Type
	{
		fs0 := make([]types.StructOption, 3)
		var t1 types.Type
		{
			tp0 := types.TypeInt16
			t1 = types.Optional(tp0)
		}
		fs0[0] = types.StructField("int64", t1)
		var t2 types.Type
		{
			tp0 := types.TypeString
			t2 = tp0
		}
		fs0[1] = types.StructField("str", t2)
		var t3 types.Type
		{
			tp0 := types.TypeInt32
			t3 = types.Optional(tp0)
		}
		fs0[2] = types.StructField("int32", t3)
		t0 = types.Struct(fs0...)
	}
	return t0
}

func ydbConvI64ToI16(x int64) int16 {
	const (
		bits = 16
		mask = (1 << (bits - 1)) - 1
	)
	var abs uint64
	{
		v := int64(x)
		m := v >> 63
		abs = uint64(v ^ m - m)
	}
	if abs&mask != abs {
		panic(
			"ydbgen: convassert: " + strconv.FormatInt(int64(x), 10) +
				" (types int64) overflows int16",
		)
	}
	return int16(x)
}
