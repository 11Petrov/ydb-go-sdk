// Code generated by MockGen. DO NOT EDIT.
// Source: writer_stream_interface.go
//
// Generated by this command:
//
//	mockgen -source writer_stream_interface.go -destination writer_stream_interface_mock_test.go -package topicwriterinternal -write_package_comment=false -typed
package topicwriterinternal

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStreamWriter is a mock of StreamWriter interface.
type MockStreamWriter struct {
	ctrl     *gomock.Controller
	recorder *MockStreamWriterMockRecorder
}

// MockStreamWriterMockRecorder is the mock recorder for MockStreamWriter.
type MockStreamWriterMockRecorder struct {
	mock *MockStreamWriter
}

// NewMockStreamWriter creates a new mock instance.
func NewMockStreamWriter(ctrl *gomock.Controller) *MockStreamWriter {
	mock := &MockStreamWriter{ctrl: ctrl}
	mock.recorder = &MockStreamWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamWriter) EXPECT() *MockStreamWriterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStreamWriter) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStreamWriterMockRecorder) Close(ctx any) *StreamWriterCloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStreamWriter)(nil).Close), ctx)
	return &StreamWriterCloseCall{Call: call}
}

// StreamWriterCloseCall wrap *gomock.Call
type StreamWriterCloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *StreamWriterCloseCall) Return(arg0 error) *StreamWriterCloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *StreamWriterCloseCall) Do(f func(context.Context) error) *StreamWriterCloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *StreamWriterCloseCall) DoAndReturn(f func(context.Context) error) *StreamWriterCloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WaitInit mocks base method.
func (m *MockStreamWriter) WaitInit(ctx context.Context) (InitialInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitInit", ctx)
	ret0, _ := ret[0].(InitialInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitInit indicates an expected call of WaitInit.
func (mr *MockStreamWriterMockRecorder) WaitInit(ctx any) *StreamWriterWaitInitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitInit", reflect.TypeOf((*MockStreamWriter)(nil).WaitInit), ctx)
	return &StreamWriterWaitInitCall{Call: call}
}

// StreamWriterWaitInitCall wrap *gomock.Call
type StreamWriterWaitInitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *StreamWriterWaitInitCall) Return(info InitialInfo, err error) *StreamWriterWaitInitCall {
	c.Call = c.Call.Return(info, err)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *StreamWriterWaitInitCall) Do(f func(context.Context) (InitialInfo, error)) *StreamWriterWaitInitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *StreamWriterWaitInitCall) DoAndReturn(f func(context.Context) (InitialInfo, error)) *StreamWriterWaitInitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Write mocks base method.
func (m *MockStreamWriter) Write(ctx context.Context, messages []PublicMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", ctx, messages)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockStreamWriterMockRecorder) Write(ctx, messages any) *StreamWriterWriteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockStreamWriter)(nil).Write), ctx, messages)
	return &StreamWriterWriteCall{Call: call}
}

// StreamWriterWriteCall wrap *gomock.Call
type StreamWriterWriteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *StreamWriterWriteCall) Return(arg0 error) *StreamWriterWriteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *StreamWriterWriteCall) Do(f func(context.Context, []PublicMessage) error) *StreamWriterWriteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *StreamWriterWriteCall) DoAndReturn(f func(context.Context, []PublicMessage) error) *StreamWriterWriteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
