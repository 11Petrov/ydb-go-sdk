// Code generated by gtrace. DO NOT EDIT.

package table

import (
	"context"
	"time"

	"github.com/ydb-platform/ydb-go-sdk/v3/table"
	"github.com/ydb-platform/ydb-go-sdk/v3/table/options"
	"github.com/ydb-platform/ydb-go-sdk/v3/table/resultset"
	"github.com/ydb-platform/ydb-go-sdk/v3/table/sessiontrace/models"
)

// Compose returns a new Trace which has functional fields composed
// both from t and x.
func (t Trace) Compose(x Trace) (ret Trace) {
	switch {
	case t.OnCreateSession == nil:
		ret.OnCreateSession = x.OnCreateSession
	case x.OnCreateSession == nil:
		ret.OnCreateSession = t.OnCreateSession
	default:
		h1 := t.OnCreateSession
		h2 := x.OnCreateSession
		ret.OnCreateSession = func(c models.CreateSessionStartInfo) func(models.CreateSessionDoneInfo) {
			r1 := h1(c)
			r2 := h2(c)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(c models.CreateSessionDoneInfo) {
					r1(c)
					r2(c)
				}
			}
		}
	}
	switch {
	case t.OnKeepAlive == nil:
		ret.OnKeepAlive = x.OnKeepAlive
	case x.OnKeepAlive == nil:
		ret.OnKeepAlive = t.OnKeepAlive
	default:
		h1 := t.OnKeepAlive
		h2 := x.OnKeepAlive
		ret.OnKeepAlive = func(k models.KeepAliveStartInfo) func(models.KeepAliveDoneInfo) {
			r1 := h1(k)
			r2 := h2(k)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(k models.KeepAliveDoneInfo) {
					r1(k)
					r2(k)
				}
			}
		}
	}
	switch {
	case t.OnDeleteSession == nil:
		ret.OnDeleteSession = x.OnDeleteSession
	case x.OnDeleteSession == nil:
		ret.OnDeleteSession = t.OnDeleteSession
	default:
		h1 := t.OnDeleteSession
		h2 := x.OnDeleteSession
		ret.OnDeleteSession = func(d models.DeleteSessionStartInfo) func(models.DeleteSessionDoneInfo) {
			r1 := h1(d)
			r2 := h2(d)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(d models.DeleteSessionDoneInfo) {
					r1(d)
					r2(d)
				}
			}
		}
	}
	switch {
	case t.OnPrepareDataQuery == nil:
		ret.OnPrepareDataQuery = x.OnPrepareDataQuery
	case x.OnPrepareDataQuery == nil:
		ret.OnPrepareDataQuery = t.OnPrepareDataQuery
	default:
		h1 := t.OnPrepareDataQuery
		h2 := x.OnPrepareDataQuery
		ret.OnPrepareDataQuery = func(p models.PrepareDataQueryStartInfo) func(models.PrepareDataQueryDoneInfo) {
			r1 := h1(p)
			r2 := h2(p)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(p models.PrepareDataQueryDoneInfo) {
					r1(p)
					r2(p)
				}
			}
		}
	}
	switch {
	case t.OnExecuteDataQuery == nil:
		ret.OnExecuteDataQuery = x.OnExecuteDataQuery
	case x.OnExecuteDataQuery == nil:
		ret.OnExecuteDataQuery = t.OnExecuteDataQuery
	default:
		h1 := t.OnExecuteDataQuery
		h2 := x.OnExecuteDataQuery
		ret.OnExecuteDataQuery = func(e models.ExecuteDataQueryStartInfo) func(models.ExecuteDataQueryDoneInfo) {
			r1 := h1(e)
			r2 := h2(e)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(e models.ExecuteDataQueryDoneInfo) {
					r1(e)
					r2(e)
				}
			}
		}
	}
	switch {
	case t.OnStreamReadTable == nil:
		ret.OnStreamReadTable = x.OnStreamReadTable
	case x.OnStreamReadTable == nil:
		ret.OnStreamReadTable = t.OnStreamReadTable
	default:
		h1 := t.OnStreamReadTable
		h2 := x.OnStreamReadTable
		ret.OnStreamReadTable = func(s models.StreamReadTableStartInfo) func(models.StreamReadTableDoneInfo) {
			r1 := h1(s)
			r2 := h2(s)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(s models.StreamReadTableDoneInfo) {
					r1(s)
					r2(s)
				}
			}
		}
	}
	switch {
	case t.OnStreamExecuteScanQuery == nil:
		ret.OnStreamExecuteScanQuery = x.OnStreamExecuteScanQuery
	case x.OnStreamExecuteScanQuery == nil:
		ret.OnStreamExecuteScanQuery = t.OnStreamExecuteScanQuery
	default:
		h1 := t.OnStreamExecuteScanQuery
		h2 := x.OnStreamExecuteScanQuery
		ret.OnStreamExecuteScanQuery = func(s models.StreamExecuteScanQueryStartInfo) func(models.StreamExecuteScanQueryDoneInfo) {
			r1 := h1(s)
			r2 := h2(s)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(s models.StreamExecuteScanQueryDoneInfo) {
					r1(s)
					r2(s)
				}
			}
		}
	}
	switch {
	case t.OnBeginTransaction == nil:
		ret.OnBeginTransaction = x.OnBeginTransaction
	case x.OnBeginTransaction == nil:
		ret.OnBeginTransaction = t.OnBeginTransaction
	default:
		h1 := t.OnBeginTransaction
		h2 := x.OnBeginTransaction
		ret.OnBeginTransaction = func(b models.BeginTransactionStartInfo) func(models.BeginTransactionDoneInfo) {
			r1 := h1(b)
			r2 := h2(b)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(b models.BeginTransactionDoneInfo) {
					r1(b)
					r2(b)
				}
			}
		}
	}
	switch {
	case t.OnCommitTransaction == nil:
		ret.OnCommitTransaction = x.OnCommitTransaction
	case x.OnCommitTransaction == nil:
		ret.OnCommitTransaction = t.OnCommitTransaction
	default:
		h1 := t.OnCommitTransaction
		h2 := x.OnCommitTransaction
		ret.OnCommitTransaction = func(c models.CommitTransactionStartInfo) func(models.CommitTransactionDoneInfo) {
			r1 := h1(c)
			r2 := h2(c)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(c models.CommitTransactionDoneInfo) {
					r1(c)
					r2(c)
				}
			}
		}
	}
	switch {
	case t.OnRollbackTransaction == nil:
		ret.OnRollbackTransaction = x.OnRollbackTransaction
	case x.OnRollbackTransaction == nil:
		ret.OnRollbackTransaction = t.OnRollbackTransaction
	default:
		h1 := t.OnRollbackTransaction
		h2 := x.OnRollbackTransaction
		ret.OnRollbackTransaction = func(r models.RollbackTransactionStartInfo) func(models.RollbackTransactionDoneInfo) {
			r1 := h1(r)
			r2 := h2(r)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(r models.RollbackTransactionDoneInfo) {
					r1(r)
					r2(r)
				}
			}
		}
	}
	return ret
}
func (t Trace) onCreateSession(c1 models.CreateSessionStartInfo) func(models.CreateSessionDoneInfo) {
	fn := t.OnCreateSession
	if fn == nil {
		return func(models.CreateSessionDoneInfo) {
			return
		}
	}
	res := fn(c1)
	if res == nil {
		return func(models.CreateSessionDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onKeepAlive(k models.KeepAliveStartInfo) func(models.KeepAliveDoneInfo) {
	fn := t.OnKeepAlive
	if fn == nil {
		return func(models.KeepAliveDoneInfo) {
			return
		}
	}
	res := fn(k)
	if res == nil {
		return func(models.KeepAliveDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onDeleteSession(d models.DeleteSessionStartInfo) func(models.DeleteSessionDoneInfo) {
	fn := t.OnDeleteSession
	if fn == nil {
		return func(models.DeleteSessionDoneInfo) {
			return
		}
	}
	res := fn(d)
	if res == nil {
		return func(models.DeleteSessionDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onPrepareDataQuery(p models.PrepareDataQueryStartInfo) func(models.PrepareDataQueryDoneInfo) {
	fn := t.OnPrepareDataQuery
	if fn == nil {
		return func(models.PrepareDataQueryDoneInfo) {
			return
		}
	}
	res := fn(p)
	if res == nil {
		return func(models.PrepareDataQueryDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onExecuteDataQuery(e models.ExecuteDataQueryStartInfo) func(models.ExecuteDataQueryDoneInfo) {
	fn := t.OnExecuteDataQuery
	if fn == nil {
		return func(models.ExecuteDataQueryDoneInfo) {
			return
		}
	}
	res := fn(e)
	if res == nil {
		return func(models.ExecuteDataQueryDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onStreamReadTable(s models.StreamReadTableStartInfo) func(models.StreamReadTableDoneInfo) {
	fn := t.OnStreamReadTable
	if fn == nil {
		return func(models.StreamReadTableDoneInfo) {
			return
		}
	}
	res := fn(s)
	if res == nil {
		return func(models.StreamReadTableDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onStreamExecuteScanQuery(s models.StreamExecuteScanQueryStartInfo) func(models.StreamExecuteScanQueryDoneInfo) {
	fn := t.OnStreamExecuteScanQuery
	if fn == nil {
		return func(models.StreamExecuteScanQueryDoneInfo) {
			return
		}
	}
	res := fn(s)
	if res == nil {
		return func(models.StreamExecuteScanQueryDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onBeginTransaction(b models.BeginTransactionStartInfo) func(models.BeginTransactionDoneInfo) {
	fn := t.OnBeginTransaction
	if fn == nil {
		return func(models.BeginTransactionDoneInfo) {
			return
		}
	}
	res := fn(b)
	if res == nil {
		return func(models.BeginTransactionDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onCommitTransaction(c1 models.CommitTransactionStartInfo) func(models.CommitTransactionDoneInfo) {
	fn := t.OnCommitTransaction
	if fn == nil {
		return func(models.CommitTransactionDoneInfo) {
			return
		}
	}
	res := fn(c1)
	if res == nil {
		return func(models.CommitTransactionDoneInfo) {
			return
		}
	}
	return res
}
func (t Trace) onRollbackTransaction(r models.RollbackTransactionStartInfo) func(models.RollbackTransactionDoneInfo) {
	fn := t.OnRollbackTransaction
	if fn == nil {
		return func(models.RollbackTransactionDoneInfo) {
			return
		}
	}
	res := fn(r)
	if res == nil {
		return func(models.RollbackTransactionDoneInfo) {
			return
		}
	}
	return res
}

// Compose returns a new SessionPoolTrace which has functional fields composed
// both from t and x.
func (t SessionPoolTrace) Compose(x SessionPoolTrace) (ret SessionPoolTrace) {
	switch {
	case t.OnCreate == nil:
		ret.OnCreate = x.OnCreate
	case x.OnCreate == nil:
		ret.OnCreate = t.OnCreate
	default:
		h1 := t.OnCreate
		h2 := x.OnCreate
		ret.OnCreate = func(s models.SessionPoolCreateStartInfo) func(models.SessionPoolCreateDoneInfo) {
			r1 := h1(s)
			r2 := h2(s)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(s models.SessionPoolCreateDoneInfo) {
					r1(s)
					r2(s)
				}
			}
		}
	}
	switch {
	case t.OnGet == nil:
		ret.OnGet = x.OnGet
	case x.OnGet == nil:
		ret.OnGet = t.OnGet
	default:
		h1 := t.OnGet
		h2 := x.OnGet
		ret.OnGet = func(s models.SessionPoolGetStartInfo) func(models.SessionPoolGetDoneInfo) {
			r1 := h1(s)
			r2 := h2(s)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(s models.SessionPoolGetDoneInfo) {
					r1(s)
					r2(s)
				}
			}
		}
	}
	switch {
	case t.OnWait == nil:
		ret.OnWait = x.OnWait
	case x.OnWait == nil:
		ret.OnWait = t.OnWait
	default:
		h1 := t.OnWait
		h2 := x.OnWait
		ret.OnWait = func(s models.SessionPoolWaitStartInfo) func(models.SessionPoolWaitDoneInfo) {
			r1 := h1(s)
			r2 := h2(s)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(s models.SessionPoolWaitDoneInfo) {
					r1(s)
					r2(s)
				}
			}
		}
	}
	switch {
	case t.OnTake == nil:
		ret.OnTake = x.OnTake
	case x.OnTake == nil:
		ret.OnTake = t.OnTake
	default:
		h1 := t.OnTake
		h2 := x.OnTake
		ret.OnTake = func(s models.SessionPoolTakeStartInfo) func(models.SessionPoolTakeWaitInfo) func(models.SessionPoolTakeDoneInfo) {
			r1 := h1(s)
			r2 := h2(s)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(s models.SessionPoolTakeWaitInfo) func(models.SessionPoolTakeDoneInfo) {
					r11 := r1(s)
					r21 := r2(s)
					switch {
					case r11 == nil:
						return r21
					case r21 == nil:
						return r11
					default:
						return func(s models.SessionPoolTakeDoneInfo) {
							r11(s)
							r21(s)
						}
					}
				}
			}
		}
	}
	switch {
	case t.OnPut == nil:
		ret.OnPut = x.OnPut
	case x.OnPut == nil:
		ret.OnPut = t.OnPut
	default:
		h1 := t.OnPut
		h2 := x.OnPut
		ret.OnPut = func(s models.SessionPoolPutStartInfo) func(models.SessionPoolPutDoneInfo) {
			r1 := h1(s)
			r2 := h2(s)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(s models.SessionPoolPutDoneInfo) {
					r1(s)
					r2(s)
				}
			}
		}
	}
	switch {
	case t.OnCloseSession == nil:
		ret.OnCloseSession = x.OnCloseSession
	case x.OnCloseSession == nil:
		ret.OnCloseSession = t.OnCloseSession
	default:
		h1 := t.OnCloseSession
		h2 := x.OnCloseSession
		ret.OnCloseSession = func(s models.SessionPoolCloseSessionStartInfo) func(models.SessionPoolCloseSessionDoneInfo) {
			r1 := h1(s)
			r2 := h2(s)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(s models.SessionPoolCloseSessionDoneInfo) {
					r1(s)
					r2(s)
				}
			}
		}
	}
	switch {
	case t.OnClose == nil:
		ret.OnClose = x.OnClose
	case x.OnClose == nil:
		ret.OnClose = t.OnClose
	default:
		h1 := t.OnClose
		h2 := x.OnClose
		ret.OnClose = func(s models.SessionPoolCloseStartInfo) func(models.SessionPoolCloseDoneInfo) {
			r1 := h1(s)
			r2 := h2(s)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(s models.SessionPoolCloseDoneInfo) {
					r1(s)
					r2(s)
				}
			}
		}
	}
	return ret
}
func (t SessionPoolTrace) onCreate(s models.SessionPoolCreateStartInfo) func(models.SessionPoolCreateDoneInfo) {
	fn := t.OnCreate
	if fn == nil {
		return func(models.SessionPoolCreateDoneInfo) {
			return
		}
	}
	res := fn(s)
	if res == nil {
		return func(models.SessionPoolCreateDoneInfo) {
			return
		}
	}
	return res
}
func (t SessionPoolTrace) onGet(s models.SessionPoolGetStartInfo) func(models.SessionPoolGetDoneInfo) {
	fn := t.OnGet
	if fn == nil {
		return func(models.SessionPoolGetDoneInfo) {
			return
		}
	}
	res := fn(s)
	if res == nil {
		return func(models.SessionPoolGetDoneInfo) {
			return
		}
	}
	return res
}
func (t SessionPoolTrace) onWait(s models.SessionPoolWaitStartInfo) func(models.SessionPoolWaitDoneInfo) {
	fn := t.OnWait
	if fn == nil {
		return func(models.SessionPoolWaitDoneInfo) {
			return
		}
	}
	res := fn(s)
	if res == nil {
		return func(models.SessionPoolWaitDoneInfo) {
			return
		}
	}
	return res
}
func (t SessionPoolTrace) onTake(s models.SessionPoolTakeStartInfo) func(models.SessionPoolTakeWaitInfo) func(models.SessionPoolTakeDoneInfo) {
	fn := t.OnTake
	if fn == nil {
		return func(models.SessionPoolTakeWaitInfo) func(models.SessionPoolTakeDoneInfo) {
			return func(models.SessionPoolTakeDoneInfo) {
				return
			}
		}
	}
	res := fn(s)
	if res == nil {
		return func(models.SessionPoolTakeWaitInfo) func(models.SessionPoolTakeDoneInfo) {
			return func(models.SessionPoolTakeDoneInfo) {
				return
			}
		}
	}
	return func(s models.SessionPoolTakeWaitInfo) func(models.SessionPoolTakeDoneInfo) {
		res := res(s)
		if res == nil {
			return func(models.SessionPoolTakeDoneInfo) {
				return
			}
		}
		return res
	}
}
func (t SessionPoolTrace) onPut(s models.SessionPoolPutStartInfo) func(models.SessionPoolPutDoneInfo) {
	fn := t.OnPut
	if fn == nil {
		return func(models.SessionPoolPutDoneInfo) {
			return
		}
	}
	res := fn(s)
	if res == nil {
		return func(models.SessionPoolPutDoneInfo) {
			return
		}
	}
	return res
}
func (t SessionPoolTrace) onCloseSession(s models.SessionPoolCloseSessionStartInfo) func(models.SessionPoolCloseSessionDoneInfo) {
	fn := t.OnCloseSession
	if fn == nil {
		return func(models.SessionPoolCloseSessionDoneInfo) {
			return
		}
	}
	res := fn(s)
	if res == nil {
		return func(models.SessionPoolCloseSessionDoneInfo) {
			return
		}
	}
	return res
}
func (t SessionPoolTrace) onClose(s models.SessionPoolCloseStartInfo) func(models.SessionPoolCloseDoneInfo) {
	fn := t.OnClose
	if fn == nil {
		return func(models.SessionPoolCloseDoneInfo) {
			return
		}
	}
	res := fn(s)
	if res == nil {
		return func(models.SessionPoolCloseDoneInfo) {
			return
		}
	}
	return res
}
func traceOnCreateSession(t Trace, c context.Context) func(_ context.Context, sessionID string, endpoint string, latency time.Duration, _ error) {
	var p models.CreateSessionStartInfo
	p.Context = c
	res := t.onCreateSession(p)
	return func(c context.Context, sessionID string, endpoint string, latency time.Duration, e error) {
		var p models.CreateSessionDoneInfo
		p.Context = c
		p.SessionID = sessionID
		p.Endpoint = endpoint
		p.Latency = latency
		p.Error = e
		res(p)
	}
}
func traceOnKeepAlive(t Trace, c context.Context, sessionID string) func(_ context.Context, sessionID string, _ options.SessionInfo, _ error) {
	var p models.KeepAliveStartInfo
	p.Context = c
	p.SessionID = sessionID
	res := t.onKeepAlive(p)
	return func(c context.Context, sessionID string, s options.SessionInfo, e error) {
		var p models.KeepAliveDoneInfo
		p.Context = c
		p.SessionID = sessionID
		p.SessionInfo = s
		p.Error = e
		res(p)
	}
}
func traceOnDeleteSession(t Trace, c context.Context, sessionID string) func(_ context.Context, sessionID string, latency time.Duration, _ error) {
	var p models.DeleteSessionStartInfo
	p.Context = c
	p.SessionID = sessionID
	res := t.onDeleteSession(p)
	return func(c context.Context, sessionID string, latency time.Duration, e error) {
		var p models.DeleteSessionDoneInfo
		p.Context = c
		p.SessionID = sessionID
		p.Latency = latency
		p.Error = e
		res(p)
	}
}
func traceOnPrepareDataQuery(t Trace, c context.Context, sessionID string, query string) func(_ context.Context, sessionID string, query string, result table.DataQuery, cached bool, _ error) {
	var p models.PrepareDataQueryStartInfo
	p.Context = c
	p.SessionID = sessionID
	p.Query = query
	res := t.onPrepareDataQuery(p)
	return func(c context.Context, sessionID string, query string, result table.DataQuery, cached bool, e error) {
		var p models.PrepareDataQueryDoneInfo
		p.Context = c
		p.SessionID = sessionID
		p.Query = query
		p.Result = result
		p.Cached = cached
		p.Error = e
		res(p)
	}
}
func traceOnExecuteDataQuery(t Trace, c context.Context, sessionID string, txID string, query table.DataQuery, parameters *table.QueryParameters) func(_ context.Context, sessionID string, txID string, query table.DataQuery, parameters *table.QueryParameters, prepared bool, _ resultset.Result, _ error) {
	var p models.ExecuteDataQueryStartInfo
	p.Context = c
	p.SessionID = sessionID
	p.TxID = txID
	p.Query = query
	p.Parameters = parameters
	res := t.onExecuteDataQuery(p)
	return func(c context.Context, sessionID string, txID string, query table.DataQuery, parameters *table.QueryParameters, prepared bool, r resultset.Result, e error) {
		var p models.ExecuteDataQueryDoneInfo
		p.Context = c
		p.SessionID = sessionID
		p.TxID = txID
		p.Query = query
		p.Parameters = parameters
		p.Prepared = prepared
		p.Result = r
		p.Error = e
		res(p)
	}
}
func traceOnStreamReadTable(t Trace, c context.Context, sessionID string) func(_ context.Context, sessionID string, _ resultset.Result, _ error) {
	var p models.StreamReadTableStartInfo
	p.Context = c
	p.SessionID = sessionID
	res := t.onStreamReadTable(p)
	return func(c context.Context, sessionID string, r resultset.Result, e error) {
		var p models.StreamReadTableDoneInfo
		p.Context = c
		p.SessionID = sessionID
		p.Result = r
		p.Error = e
		res(p)
	}
}
func traceOnStreamExecuteScanQuery(t Trace, c context.Context, sessionID string, query table.DataQuery, parameters *table.QueryParameters) func(_ context.Context, sessionID string, query table.DataQuery, parameters *table.QueryParameters, _ resultset.Result, _ error) {
	var p models.StreamExecuteScanQueryStartInfo
	p.Context = c
	p.SessionID = sessionID
	p.Query = query
	p.Parameters = parameters
	res := t.onStreamExecuteScanQuery(p)
	return func(c context.Context, sessionID string, query table.DataQuery, parameters *table.QueryParameters, r resultset.Result, e error) {
		var p models.StreamExecuteScanQueryDoneInfo
		p.Context = c
		p.SessionID = sessionID
		p.Query = query
		p.Parameters = parameters
		p.Result = r
		p.Error = e
		res(p)
	}
}
func traceOnBeginTransaction(t Trace, c context.Context, sessionID string) func(_ context.Context, sessionID string, txID string, _ error) {
	var p models.BeginTransactionStartInfo
	p.Context = c
	p.SessionID = sessionID
	res := t.onBeginTransaction(p)
	return func(c context.Context, sessionID string, txID string, e error) {
		var p models.BeginTransactionDoneInfo
		p.Context = c
		p.SessionID = sessionID
		p.TxID = txID
		p.Error = e
		res(p)
	}
}
func traceOnCommitTransaction(t Trace, c context.Context, sessionID string, txID string) func(_ context.Context, sessionID string, txID string, _ error) {
	var p models.CommitTransactionStartInfo
	p.Context = c
	p.SessionID = sessionID
	p.TxID = txID
	res := t.onCommitTransaction(p)
	return func(c context.Context, sessionID string, txID string, e error) {
		var p models.CommitTransactionDoneInfo
		p.Context = c
		p.SessionID = sessionID
		p.TxID = txID
		p.Error = e
		res(p)
	}
}
func traceOnRollbackTransaction(t Trace, c context.Context, sessionID string, txID string) func(_ context.Context, sessionID string, txID string, _ error) {
	var p models.RollbackTransactionStartInfo
	p.Context = c
	p.SessionID = sessionID
	p.TxID = txID
	res := t.onRollbackTransaction(p)
	return func(c context.Context, sessionID string, txID string, e error) {
		var p models.RollbackTransactionDoneInfo
		p.Context = c
		p.SessionID = sessionID
		p.TxID = txID
		p.Error = e
		res(p)
	}
}
func sessionPoolTraceOnCreate(t SessionPoolTrace, c context.Context) func(_ context.Context, sessionID string, _ error) {
	var p models.SessionPoolCreateStartInfo
	p.Context = c
	res := t.onCreate(p)
	return func(c context.Context, sessionID string, e error) {
		var p models.SessionPoolCreateDoneInfo
		p.Context = c
		p.SessionID = sessionID
		p.Error = e
		res(p)
	}
}
func sessionPoolTraceOnGet(t SessionPoolTrace, c context.Context) func(_ context.Context, sessionID string, latency time.Duration, retryAttempts int, _ error) {
	var p models.SessionPoolGetStartInfo
	p.Context = c
	res := t.onGet(p)
	return func(c context.Context, sessionID string, latency time.Duration, retryAttempts int, e error) {
		var p models.SessionPoolGetDoneInfo
		p.Context = c
		p.SessionID = sessionID
		p.Latency = latency
		p.RetryAttempts = retryAttempts
		p.Error = e
		res(p)
	}
}
func sessionPoolTraceOnWait(t SessionPoolTrace, c context.Context) func(_ context.Context, sessionID string, _ error) {
	var p models.SessionPoolWaitStartInfo
	p.Context = c
	res := t.onWait(p)
	return func(c context.Context, sessionID string, e error) {
		var p models.SessionPoolWaitDoneInfo
		p.Context = c
		p.SessionID = sessionID
		p.Error = e
		res(p)
	}
}
func sessionPoolTraceOnTake(t SessionPoolTrace, c context.Context, sessionID string) func(_ context.Context, sessionID string) func(_ context.Context, sessionID string, took bool, _ error) {
	var p models.SessionPoolTakeStartInfo
	p.Context = c
	p.SessionID = sessionID
	res := t.onTake(p)
	return func(c context.Context, sessionID string) func(context.Context, string, bool, error) {
		var p models.SessionPoolTakeWaitInfo
		p.Context = c
		p.SessionID = sessionID
		res := res(p)
		return func(c context.Context, sessionID string, took bool, e error) {
			var p models.SessionPoolTakeDoneInfo
			p.Context = c
			p.SessionID = sessionID
			p.Took = took
			p.Error = e
			res(p)
		}
	}
}
func sessionPoolTraceOnPut(t SessionPoolTrace, c context.Context, sessionID string) func(_ context.Context, sessionID string, _ error) {
	var p models.SessionPoolPutStartInfo
	p.Context = c
	p.SessionID = sessionID
	res := t.onPut(p)
	return func(c context.Context, sessionID string, e error) {
		var p models.SessionPoolPutDoneInfo
		p.Context = c
		p.SessionID = sessionID
		p.Error = e
		res(p)
	}
}
func sessionPoolTraceOnCloseSession(t SessionPoolTrace, c context.Context, sessionID string) func(_ context.Context, sessionID string, _ error) {
	var p models.SessionPoolCloseSessionStartInfo
	p.Context = c
	p.SessionID = sessionID
	res := t.onCloseSession(p)
	return func(c context.Context, sessionID string, e error) {
		var p models.SessionPoolCloseSessionDoneInfo
		p.Context = c
		p.SessionID = sessionID
		p.Error = e
		res(p)
	}
}
func sessionPoolTraceOnClose(t SessionPoolTrace, c context.Context) func(context.Context, error) {
	var p models.SessionPoolCloseStartInfo
	p.Context = c
	res := t.onClose(p)
	return func(c context.Context, e error) {
		var p models.SessionPoolCloseDoneInfo
		p.Context = c
		p.Error = e
		res(p)
	}
}
