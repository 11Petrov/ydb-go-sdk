// Code generated by gtrace. DO NOT EDIT.

package trace

import (
	"context"
)

// Compose returns a new Table which has functional fields composed
// both from t and x.
func (t Table) Compose(x Table) (ret Table) {
	switch {
	case t.OnInit == nil:
		ret.OnInit = x.OnInit
	case x.OnInit == nil:
		ret.OnInit = t.OnInit
	default:
		h1 := t.OnInit
		h2 := x.OnInit
		ret.OnInit = func(t TableInitStartInfo) func(TableInitDoneInfo) {
			r1 := h1(t)
			r2 := h2(t)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(t TableInitDoneInfo) {
					r1(t)
					r2(t)
				}
			}
		}
	}
	switch {
	case t.OnClose == nil:
		ret.OnClose = x.OnClose
	case x.OnClose == nil:
		ret.OnClose = t.OnClose
	default:
		h1 := t.OnClose
		h2 := x.OnClose
		ret.OnClose = func(t TableCloseStartInfo) func(TableCloseDoneInfo) {
			r1 := h1(t)
			r2 := h2(t)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(t TableCloseDoneInfo) {
					r1(t)
					r2(t)
				}
			}
		}
	}
	switch {
	case t.OnDo == nil:
		ret.OnDo = x.OnDo
	case x.OnDo == nil:
		ret.OnDo = t.OnDo
	default:
		h1 := t.OnDo
		h2 := x.OnDo
		ret.OnDo = func(t TableDoStartInfo) func(TableDoIntermediateInfo) func(TableDoDoneInfo) {
			r1 := h1(t)
			r2 := h2(t)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(info TableDoIntermediateInfo) func(TableDoDoneInfo) {
					r11 := r1(info)
					r21 := r2(info)
					switch {
					case r11 == nil:
						return r21
					case r21 == nil:
						return r11
					default:
						return func(t TableDoDoneInfo) {
							r11(t)
							r21(t)
						}
					}
				}
			}
		}
	}
	switch {
	case t.OnDoTx == nil:
		ret.OnDoTx = x.OnDoTx
	case x.OnDoTx == nil:
		ret.OnDoTx = t.OnDoTx
	default:
		h1 := t.OnDoTx
		h2 := x.OnDoTx
		ret.OnDoTx = func(t TableDoTxStartInfo) func(TableDoTxIntermediateInfo) func(TableDoTxDoneInfo) {
			r1 := h1(t)
			r2 := h2(t)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(info TableDoTxIntermediateInfo) func(TableDoTxDoneInfo) {
					r11 := r1(info)
					r21 := r2(info)
					switch {
					case r11 == nil:
						return r21
					case r21 == nil:
						return r11
					default:
						return func(t TableDoTxDoneInfo) {
							r11(t)
							r21(t)
						}
					}
				}
			}
		}
	}
	switch {
	case t.OnCreateSession == nil:
		ret.OnCreateSession = x.OnCreateSession
	case x.OnCreateSession == nil:
		ret.OnCreateSession = t.OnCreateSession
	default:
		h1 := t.OnCreateSession
		h2 := x.OnCreateSession
		ret.OnCreateSession = func(t TableCreateSessionStartInfo) func(TableCreateSessionIntermediateInfo) func(TableCreateSessionDoneInfo) {
			r1 := h1(t)
			r2 := h2(t)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(info TableCreateSessionIntermediateInfo) func(TableCreateSessionDoneInfo) {
					r11 := r1(info)
					r21 := r2(info)
					switch {
					case r11 == nil:
						return r21
					case r21 == nil:
						return r11
					default:
						return func(t TableCreateSessionDoneInfo) {
							r11(t)
							r21(t)
						}
					}
				}
			}
		}
	}
	switch {
	case t.OnSessionNew == nil:
		ret.OnSessionNew = x.OnSessionNew
	case x.OnSessionNew == nil:
		ret.OnSessionNew = t.OnSessionNew
	default:
		h1 := t.OnSessionNew
		h2 := x.OnSessionNew
		ret.OnSessionNew = func(t TableSessionNewStartInfo) func(TableSessionNewDoneInfo) {
			r1 := h1(t)
			r2 := h2(t)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(t TableSessionNewDoneInfo) {
					r1(t)
					r2(t)
				}
			}
		}
	}
	switch {
	case t.OnSessionDelete == nil:
		ret.OnSessionDelete = x.OnSessionDelete
	case x.OnSessionDelete == nil:
		ret.OnSessionDelete = t.OnSessionDelete
	default:
		h1 := t.OnSessionDelete
		h2 := x.OnSessionDelete
		ret.OnSessionDelete = func(t TableSessionDeleteStartInfo) func(TableSessionDeleteDoneInfo) {
			r1 := h1(t)
			r2 := h2(t)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(t TableSessionDeleteDoneInfo) {
					r1(t)
					r2(t)
				}
			}
		}
	}
	switch {
	case t.OnSessionKeepAlive == nil:
		ret.OnSessionKeepAlive = x.OnSessionKeepAlive
	case x.OnSessionKeepAlive == nil:
		ret.OnSessionKeepAlive = t.OnSessionKeepAlive
	default:
		h1 := t.OnSessionKeepAlive
		h2 := x.OnSessionKeepAlive
		ret.OnSessionKeepAlive = func(t TableKeepAliveStartInfo) func(TableKeepAliveDoneInfo) {
			r1 := h1(t)
			r2 := h2(t)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(t TableKeepAliveDoneInfo) {
					r1(t)
					r2(t)
				}
			}
		}
	}
	switch {
	case t.OnSessionQueryPrepare == nil:
		ret.OnSessionQueryPrepare = x.OnSessionQueryPrepare
	case x.OnSessionQueryPrepare == nil:
		ret.OnSessionQueryPrepare = t.OnSessionQueryPrepare
	default:
		h1 := t.OnSessionQueryPrepare
		h2 := x.OnSessionQueryPrepare
		ret.OnSessionQueryPrepare = func(t TablePrepareDataQueryStartInfo) func(TablePrepareDataQueryDoneInfo) {
			r1 := h1(t)
			r2 := h2(t)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(t TablePrepareDataQueryDoneInfo) {
					r1(t)
					r2(t)
				}
			}
		}
	}
	switch {
	case t.OnSessionQueryExecute == nil:
		ret.OnSessionQueryExecute = x.OnSessionQueryExecute
	case x.OnSessionQueryExecute == nil:
		ret.OnSessionQueryExecute = t.OnSessionQueryExecute
	default:
		h1 := t.OnSessionQueryExecute
		h2 := x.OnSessionQueryExecute
		ret.OnSessionQueryExecute = func(t TableExecuteDataQueryStartInfo) func(TableExecuteDataQueryDoneInfo) {
			r1 := h1(t)
			r2 := h2(t)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(t TableExecuteDataQueryDoneInfo) {
					r1(t)
					r2(t)
				}
			}
		}
	}
	switch {
	case t.OnSessionQueryExplain == nil:
		ret.OnSessionQueryExplain = x.OnSessionQueryExplain
	case x.OnSessionQueryExplain == nil:
		ret.OnSessionQueryExplain = t.OnSessionQueryExplain
	default:
		h1 := t.OnSessionQueryExplain
		h2 := x.OnSessionQueryExplain
		ret.OnSessionQueryExplain = func(t TableExplainQueryStartInfo) func(TableExplainQueryDoneInfo) {
			r1 := h1(t)
			r2 := h2(t)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(t TableExplainQueryDoneInfo) {
					r1(t)
					r2(t)
				}
			}
		}
	}
	switch {
	case t.OnSessionQueryStreamExecute == nil:
		ret.OnSessionQueryStreamExecute = x.OnSessionQueryStreamExecute
	case x.OnSessionQueryStreamExecute == nil:
		ret.OnSessionQueryStreamExecute = t.OnSessionQueryStreamExecute
	default:
		h1 := t.OnSessionQueryStreamExecute
		h2 := x.OnSessionQueryStreamExecute
		ret.OnSessionQueryStreamExecute = func(t TableSessionQueryStreamExecuteStartInfo) func(TableSessionQueryStreamExecuteIntermediateInfo) func(TableSessionQueryStreamExecuteDoneInfo) {
			r1 := h1(t)
			r2 := h2(t)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(t TableSessionQueryStreamExecuteIntermediateInfo) func(TableSessionQueryStreamExecuteDoneInfo) {
					r11 := r1(t)
					r21 := r2(t)
					switch {
					case r11 == nil:
						return r21
					case r21 == nil:
						return r11
					default:
						return func(t TableSessionQueryStreamExecuteDoneInfo) {
							r11(t)
							r21(t)
						}
					}
				}
			}
		}
	}
	switch {
	case t.OnSessionQueryStreamRead == nil:
		ret.OnSessionQueryStreamRead = x.OnSessionQueryStreamRead
	case x.OnSessionQueryStreamRead == nil:
		ret.OnSessionQueryStreamRead = t.OnSessionQueryStreamRead
	default:
		h1 := t.OnSessionQueryStreamRead
		h2 := x.OnSessionQueryStreamRead
		ret.OnSessionQueryStreamRead = func(t TableSessionQueryStreamReadStartInfo) func(TableSessionQueryStreamReadIntermediateInfo) func(TableSessionQueryStreamReadDoneInfo) {
			r1 := h1(t)
			r2 := h2(t)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(t TableSessionQueryStreamReadIntermediateInfo) func(TableSessionQueryStreamReadDoneInfo) {
					r11 := r1(t)
					r21 := r2(t)
					switch {
					case r11 == nil:
						return r21
					case r21 == nil:
						return r11
					default:
						return func(t TableSessionQueryStreamReadDoneInfo) {
							r11(t)
							r21(t)
						}
					}
				}
			}
		}
	}
	switch {
	case t.OnSessionTransactionBegin == nil:
		ret.OnSessionTransactionBegin = x.OnSessionTransactionBegin
	case x.OnSessionTransactionBegin == nil:
		ret.OnSessionTransactionBegin = t.OnSessionTransactionBegin
	default:
		h1 := t.OnSessionTransactionBegin
		h2 := x.OnSessionTransactionBegin
		ret.OnSessionTransactionBegin = func(t TableSessionTransactionBeginStartInfo) func(TableSessionTransactionBeginDoneInfo) {
			r1 := h1(t)
			r2 := h2(t)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(t TableSessionTransactionBeginDoneInfo) {
					r1(t)
					r2(t)
				}
			}
		}
	}
	switch {
	case t.OnSessionTransactionCommit == nil:
		ret.OnSessionTransactionCommit = x.OnSessionTransactionCommit
	case x.OnSessionTransactionCommit == nil:
		ret.OnSessionTransactionCommit = t.OnSessionTransactionCommit
	default:
		h1 := t.OnSessionTransactionCommit
		h2 := x.OnSessionTransactionCommit
		ret.OnSessionTransactionCommit = func(t TableSessionTransactionCommitStartInfo) func(TableSessionTransactionCommitDoneInfo) {
			r1 := h1(t)
			r2 := h2(t)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(t TableSessionTransactionCommitDoneInfo) {
					r1(t)
					r2(t)
				}
			}
		}
	}
	switch {
	case t.OnSessionTransactionRollback == nil:
		ret.OnSessionTransactionRollback = x.OnSessionTransactionRollback
	case x.OnSessionTransactionRollback == nil:
		ret.OnSessionTransactionRollback = t.OnSessionTransactionRollback
	default:
		h1 := t.OnSessionTransactionRollback
		h2 := x.OnSessionTransactionRollback
		ret.OnSessionTransactionRollback = func(t TableSessionTransactionRollbackStartInfo) func(TableSessionTransactionRollbackDoneInfo) {
			r1 := h1(t)
			r2 := h2(t)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(t TableSessionTransactionRollbackDoneInfo) {
					r1(t)
					r2(t)
				}
			}
		}
	}
	switch {
	case t.OnPoolStateChange == nil:
		ret.OnPoolStateChange = x.OnPoolStateChange
	case x.OnPoolStateChange == nil:
		ret.OnPoolStateChange = t.OnPoolStateChange
	default:
		h1 := t.OnPoolStateChange
		h2 := x.OnPoolStateChange
		ret.OnPoolStateChange = func(t TablePooStateChangeInfo) {
			h1(t)
			h2(t)
		}
	}
	switch {
	case t.OnPoolSessionNew == nil:
		ret.OnPoolSessionNew = x.OnPoolSessionNew
	case x.OnPoolSessionNew == nil:
		ret.OnPoolSessionNew = t.OnPoolSessionNew
	default:
		h1 := t.OnPoolSessionNew
		h2 := x.OnPoolSessionNew
		ret.OnPoolSessionNew = func(t TablePoolSessionNewStartInfo) func(TablePoolSessionNewDoneInfo) {
			r1 := h1(t)
			r2 := h2(t)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(t TablePoolSessionNewDoneInfo) {
					r1(t)
					r2(t)
				}
			}
		}
	}
	switch {
	case t.OnPoolSessionClose == nil:
		ret.OnPoolSessionClose = x.OnPoolSessionClose
	case x.OnPoolSessionClose == nil:
		ret.OnPoolSessionClose = t.OnPoolSessionClose
	default:
		h1 := t.OnPoolSessionClose
		h2 := x.OnPoolSessionClose
		ret.OnPoolSessionClose = func(t TablePoolSessionCloseStartInfo) func(TablePoolSessionCloseDoneInfo) {
			r1 := h1(t)
			r2 := h2(t)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(t TablePoolSessionCloseDoneInfo) {
					r1(t)
					r2(t)
				}
			}
		}
	}
	switch {
	case t.OnPoolPut == nil:
		ret.OnPoolPut = x.OnPoolPut
	case x.OnPoolPut == nil:
		ret.OnPoolPut = t.OnPoolPut
	default:
		h1 := t.OnPoolPut
		h2 := x.OnPoolPut
		ret.OnPoolPut = func(t TablePoolPutStartInfo) func(TablePoolPutDoneInfo) {
			r1 := h1(t)
			r2 := h2(t)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(t TablePoolPutDoneInfo) {
					r1(t)
					r2(t)
				}
			}
		}
	}
	switch {
	case t.OnPoolGet == nil:
		ret.OnPoolGet = x.OnPoolGet
	case x.OnPoolGet == nil:
		ret.OnPoolGet = t.OnPoolGet
	default:
		h1 := t.OnPoolGet
		h2 := x.OnPoolGet
		ret.OnPoolGet = func(t TablePoolGetStartInfo) func(TablePoolGetDoneInfo) {
			r1 := h1(t)
			r2 := h2(t)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(t TablePoolGetDoneInfo) {
					r1(t)
					r2(t)
				}
			}
		}
	}
	switch {
	case t.OnPoolWait == nil:
		ret.OnPoolWait = x.OnPoolWait
	case x.OnPoolWait == nil:
		ret.OnPoolWait = t.OnPoolWait
	default:
		h1 := t.OnPoolWait
		h2 := x.OnPoolWait
		ret.OnPoolWait = func(t TablePoolWaitStartInfo) func(TablePoolWaitDoneInfo) {
			r1 := h1(t)
			r2 := h2(t)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(t TablePoolWaitDoneInfo) {
					r1(t)
					r2(t)
				}
			}
		}
	}
	return ret
}
func (t Table) onInit(t1 TableInitStartInfo) func(TableInitDoneInfo) {
	fn := t.OnInit
	if fn == nil {
		return func(TableInitDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TableInitDoneInfo) {
			return
		}
	}
	return res
}
func (t Table) onClose(t1 TableCloseStartInfo) func(TableCloseDoneInfo) {
	fn := t.OnClose
	if fn == nil {
		return func(TableCloseDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TableCloseDoneInfo) {
			return
		}
	}
	return res
}
func (t Table) onDo(t1 TableDoStartInfo) func(info TableDoIntermediateInfo) func(TableDoDoneInfo) {
	fn := t.OnDo
	if fn == nil {
		return func(TableDoIntermediateInfo) func(TableDoDoneInfo) {
			return func(TableDoDoneInfo) {
				return
			}
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TableDoIntermediateInfo) func(TableDoDoneInfo) {
			return func(TableDoDoneInfo) {
				return
			}
		}
	}
	return func(info TableDoIntermediateInfo) func(TableDoDoneInfo) {
		res := res(info)
		if res == nil {
			return func(TableDoDoneInfo) {
				return
			}
		}
		return res
	}
}
func (t Table) onDoTx(t1 TableDoTxStartInfo) func(info TableDoTxIntermediateInfo) func(TableDoTxDoneInfo) {
	fn := t.OnDoTx
	if fn == nil {
		return func(TableDoTxIntermediateInfo) func(TableDoTxDoneInfo) {
			return func(TableDoTxDoneInfo) {
				return
			}
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TableDoTxIntermediateInfo) func(TableDoTxDoneInfo) {
			return func(TableDoTxDoneInfo) {
				return
			}
		}
	}
	return func(info TableDoTxIntermediateInfo) func(TableDoTxDoneInfo) {
		res := res(info)
		if res == nil {
			return func(TableDoTxDoneInfo) {
				return
			}
		}
		return res
	}
}
func (t Table) onCreateSession(t1 TableCreateSessionStartInfo) func(info TableCreateSessionIntermediateInfo) func(TableCreateSessionDoneInfo) {
	fn := t.OnCreateSession
	if fn == nil {
		return func(TableCreateSessionIntermediateInfo) func(TableCreateSessionDoneInfo) {
			return func(TableCreateSessionDoneInfo) {
				return
			}
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TableCreateSessionIntermediateInfo) func(TableCreateSessionDoneInfo) {
			return func(TableCreateSessionDoneInfo) {
				return
			}
		}
	}
	return func(info TableCreateSessionIntermediateInfo) func(TableCreateSessionDoneInfo) {
		res := res(info)
		if res == nil {
			return func(TableCreateSessionDoneInfo) {
				return
			}
		}
		return res
	}
}
func (t Table) onSessionNew(t1 TableSessionNewStartInfo) func(TableSessionNewDoneInfo) {
	fn := t.OnSessionNew
	if fn == nil {
		return func(TableSessionNewDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TableSessionNewDoneInfo) {
			return
		}
	}
	return res
}
func (t Table) onSessionDelete(t1 TableSessionDeleteStartInfo) func(TableSessionDeleteDoneInfo) {
	fn := t.OnSessionDelete
	if fn == nil {
		return func(TableSessionDeleteDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TableSessionDeleteDoneInfo) {
			return
		}
	}
	return res
}
func (t Table) onSessionKeepAlive(t1 TableKeepAliveStartInfo) func(TableKeepAliveDoneInfo) {
	fn := t.OnSessionKeepAlive
	if fn == nil {
		return func(TableKeepAliveDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TableKeepAliveDoneInfo) {
			return
		}
	}
	return res
}
func (t Table) onSessionQueryPrepare(t1 TablePrepareDataQueryStartInfo) func(TablePrepareDataQueryDoneInfo) {
	fn := t.OnSessionQueryPrepare
	if fn == nil {
		return func(TablePrepareDataQueryDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TablePrepareDataQueryDoneInfo) {
			return
		}
	}
	return res
}
func (t Table) onSessionQueryExecute(t1 TableExecuteDataQueryStartInfo) func(TableExecuteDataQueryDoneInfo) {
	fn := t.OnSessionQueryExecute
	if fn == nil {
		return func(TableExecuteDataQueryDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TableExecuteDataQueryDoneInfo) {
			return
		}
	}
	return res
}
func (t Table) onSessionQueryExplain(t1 TableExplainQueryStartInfo) func(TableExplainQueryDoneInfo) {
	fn := t.OnSessionQueryExplain
	if fn == nil {
		return func(TableExplainQueryDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TableExplainQueryDoneInfo) {
			return
		}
	}
	return res
}
func (t Table) onSessionQueryStreamExecute(t1 TableSessionQueryStreamExecuteStartInfo) func(TableSessionQueryStreamExecuteIntermediateInfo) func(TableSessionQueryStreamExecuteDoneInfo) {
	fn := t.OnSessionQueryStreamExecute
	if fn == nil {
		return func(TableSessionQueryStreamExecuteIntermediateInfo) func(TableSessionQueryStreamExecuteDoneInfo) {
			return func(TableSessionQueryStreamExecuteDoneInfo) {
				return
			}
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TableSessionQueryStreamExecuteIntermediateInfo) func(TableSessionQueryStreamExecuteDoneInfo) {
			return func(TableSessionQueryStreamExecuteDoneInfo) {
				return
			}
		}
	}
	return func(t TableSessionQueryStreamExecuteIntermediateInfo) func(TableSessionQueryStreamExecuteDoneInfo) {
		res := res(t)
		if res == nil {
			return func(TableSessionQueryStreamExecuteDoneInfo) {
				return
			}
		}
		return res
	}
}
func (t Table) onSessionQueryStreamRead(t1 TableSessionQueryStreamReadStartInfo) func(TableSessionQueryStreamReadIntermediateInfo) func(TableSessionQueryStreamReadDoneInfo) {
	fn := t.OnSessionQueryStreamRead
	if fn == nil {
		return func(TableSessionQueryStreamReadIntermediateInfo) func(TableSessionQueryStreamReadDoneInfo) {
			return func(TableSessionQueryStreamReadDoneInfo) {
				return
			}
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TableSessionQueryStreamReadIntermediateInfo) func(TableSessionQueryStreamReadDoneInfo) {
			return func(TableSessionQueryStreamReadDoneInfo) {
				return
			}
		}
	}
	return func(t TableSessionQueryStreamReadIntermediateInfo) func(TableSessionQueryStreamReadDoneInfo) {
		res := res(t)
		if res == nil {
			return func(TableSessionQueryStreamReadDoneInfo) {
				return
			}
		}
		return res
	}
}
func (t Table) onSessionTransactionBegin(t1 TableSessionTransactionBeginStartInfo) func(TableSessionTransactionBeginDoneInfo) {
	fn := t.OnSessionTransactionBegin
	if fn == nil {
		return func(TableSessionTransactionBeginDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TableSessionTransactionBeginDoneInfo) {
			return
		}
	}
	return res
}
func (t Table) onSessionTransactionCommit(t1 TableSessionTransactionCommitStartInfo) func(TableSessionTransactionCommitDoneInfo) {
	fn := t.OnSessionTransactionCommit
	if fn == nil {
		return func(TableSessionTransactionCommitDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TableSessionTransactionCommitDoneInfo) {
			return
		}
	}
	return res
}
func (t Table) onSessionTransactionRollback(t1 TableSessionTransactionRollbackStartInfo) func(TableSessionTransactionRollbackDoneInfo) {
	fn := t.OnSessionTransactionRollback
	if fn == nil {
		return func(TableSessionTransactionRollbackDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TableSessionTransactionRollbackDoneInfo) {
			return
		}
	}
	return res
}
func (t Table) onPoolStateChange(t1 TablePooStateChangeInfo) {
	fn := t.OnPoolStateChange
	if fn == nil {
		return
	}
	fn(t1)
}
func (t Table) onPoolSessionNew(t1 TablePoolSessionNewStartInfo) func(TablePoolSessionNewDoneInfo) {
	fn := t.OnPoolSessionNew
	if fn == nil {
		return func(TablePoolSessionNewDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TablePoolSessionNewDoneInfo) {
			return
		}
	}
	return res
}
func (t Table) onPoolSessionClose(t1 TablePoolSessionCloseStartInfo) func(TablePoolSessionCloseDoneInfo) {
	fn := t.OnPoolSessionClose
	if fn == nil {
		return func(TablePoolSessionCloseDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TablePoolSessionCloseDoneInfo) {
			return
		}
	}
	return res
}
func (t Table) onPoolPut(t1 TablePoolPutStartInfo) func(TablePoolPutDoneInfo) {
	fn := t.OnPoolPut
	if fn == nil {
		return func(TablePoolPutDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TablePoolPutDoneInfo) {
			return
		}
	}
	return res
}
func (t Table) onPoolGet(t1 TablePoolGetStartInfo) func(TablePoolGetDoneInfo) {
	fn := t.OnPoolGet
	if fn == nil {
		return func(TablePoolGetDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TablePoolGetDoneInfo) {
			return
		}
	}
	return res
}
func (t Table) onPoolWait(t1 TablePoolWaitStartInfo) func(TablePoolWaitDoneInfo) {
	fn := t.OnPoolWait
	if fn == nil {
		return func(TablePoolWaitDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TablePoolWaitDoneInfo) {
			return
		}
	}
	return res
}
func TableOnInit(t Table, c *context.Context) func(limit int, keepAliveMinSize int) {
	var p TableInitStartInfo
	p.Context = c
	res := t.onInit(p)
	return func(limit int, keepAliveMinSize int) {
		var p TableInitDoneInfo
		p.Limit = limit
		p.KeepAliveMinSize = keepAliveMinSize
		res(p)
	}
}
func TableOnClose(t Table, c *context.Context) func(error) {
	var p TableCloseStartInfo
	p.Context = c
	res := t.onClose(p)
	return func(e error) {
		var p TableCloseDoneInfo
		p.Error = e
		res(p)
	}
}
func TableOnDo(t Table, c *context.Context, idempotent bool) func(error) func(attempts int, _ error) {
	var p TableDoStartInfo
	p.Context = c
	p.Idempotent = idempotent
	res := t.onDo(p)
	return func(e error) func(int, error) {
		var p TableDoIntermediateInfo
		p.Error = e
		res := res(p)
		return func(attempts int, e error) {
			var p TableDoDoneInfo
			p.Attempts = attempts
			p.Error = e
			res(p)
		}
	}
}
func TableOnDoTx(t Table, c *context.Context, idempotent bool) func(error) func(attempts int, _ error) {
	var p TableDoTxStartInfo
	p.Context = c
	p.Idempotent = idempotent
	res := t.onDoTx(p)
	return func(e error) func(int, error) {
		var p TableDoTxIntermediateInfo
		p.Error = e
		res := res(p)
		return func(attempts int, e error) {
			var p TableDoTxDoneInfo
			p.Attempts = attempts
			p.Error = e
			res(p)
		}
	}
}
func TableOnCreateSession(t Table, c *context.Context) func(error) func(session tableSessionInfo, attempts int, _ error) {
	var p TableCreateSessionStartInfo
	p.Context = c
	res := t.onCreateSession(p)
	return func(e error) func(tableSessionInfo, int, error) {
		var p TableCreateSessionIntermediateInfo
		p.Error = e
		res := res(p)
		return func(session tableSessionInfo, attempts int, e error) {
			var p TableCreateSessionDoneInfo
			p.Session = session
			p.Attempts = attempts
			p.Error = e
			res(p)
		}
	}
}
func TableOnSessionNew(t Table, c *context.Context) func(session tableSessionInfo, _ error) {
	var p TableSessionNewStartInfo
	p.Context = c
	res := t.onSessionNew(p)
	return func(session tableSessionInfo, e error) {
		var p TableSessionNewDoneInfo
		p.Session = session
		p.Error = e
		res(p)
	}
}
func TableOnSessionDelete(t Table, c *context.Context, session tableSessionInfo) func(error) {
	var p TableSessionDeleteStartInfo
	p.Context = c
	p.Session = session
	res := t.onSessionDelete(p)
	return func(e error) {
		var p TableSessionDeleteDoneInfo
		p.Error = e
		res(p)
	}
}
func TableOnSessionKeepAlive(t Table, c *context.Context, session tableSessionInfo) func(error) {
	var p TableKeepAliveStartInfo
	p.Context = c
	p.Session = session
	res := t.onSessionKeepAlive(p)
	return func(e error) {
		var p TableKeepAliveDoneInfo
		p.Error = e
		res(p)
	}
}
func TableOnSessionQueryPrepare(t Table, c *context.Context, session tableSessionInfo, query string) func(result tableDataQuery, _ error) {
	var p TablePrepareDataQueryStartInfo
	p.Context = c
	p.Session = session
	p.Query = query
	res := t.onSessionQueryPrepare(p)
	return func(result tableDataQuery, e error) {
		var p TablePrepareDataQueryDoneInfo
		p.Result = result
		p.Error = e
		res(p)
	}
}
func TableOnSessionQueryExecute(t Table, c *context.Context, session tableSessionInfo, query tableDataQuery, parameters tableQueryParameters) func(tx tableTransactionInfo, prepared bool, result tableResult, _ error) {
	var p TableExecuteDataQueryStartInfo
	p.Context = c
	p.Session = session
	p.Query = query
	p.Parameters = parameters
	res := t.onSessionQueryExecute(p)
	return func(tx tableTransactionInfo, prepared bool, result tableResult, e error) {
		var p TableExecuteDataQueryDoneInfo
		p.Tx = tx
		p.Prepared = prepared
		p.Result = result
		p.Error = e
		res(p)
	}
}
func TableOnSessionQueryExplain(t Table, c *context.Context, session tableSessionInfo, query string) func(aST string, plan string, _ error) {
	var p TableExplainQueryStartInfo
	p.Context = c
	p.Session = session
	p.Query = query
	res := t.onSessionQueryExplain(p)
	return func(aST string, plan string, e error) {
		var p TableExplainQueryDoneInfo
		p.AST = aST
		p.Plan = plan
		p.Error = e
		res(p)
	}
}
func TableOnSessionQueryStreamExecute(t Table, c *context.Context, session tableSessionInfo, query tableDataQuery, parameters tableQueryParameters) func(error) func(error) {
	var p TableSessionQueryStreamExecuteStartInfo
	p.Context = c
	p.Session = session
	p.Query = query
	p.Parameters = parameters
	res := t.onSessionQueryStreamExecute(p)
	return func(e error) func(error) {
		var p TableSessionQueryStreamExecuteIntermediateInfo
		p.Error = e
		res := res(p)
		return func(e error) {
			var p TableSessionQueryStreamExecuteDoneInfo
			p.Error = e
			res(p)
		}
	}
}
func TableOnSessionQueryStreamRead(t Table, c *context.Context, session tableSessionInfo) func(error) func(error) {
	var p TableSessionQueryStreamReadStartInfo
	p.Context = c
	p.Session = session
	res := t.onSessionQueryStreamRead(p)
	return func(e error) func(error) {
		var p TableSessionQueryStreamReadIntermediateInfo
		p.Error = e
		res := res(p)
		return func(e error) {
			var p TableSessionQueryStreamReadDoneInfo
			p.Error = e
			res(p)
		}
	}
}
func TableOnSessionTransactionBegin(t Table, c *context.Context, session tableSessionInfo) func(tx tableTransactionInfo, _ error) {
	var p TableSessionTransactionBeginStartInfo
	p.Context = c
	p.Session = session
	res := t.onSessionTransactionBegin(p)
	return func(tx tableTransactionInfo, e error) {
		var p TableSessionTransactionBeginDoneInfo
		p.Tx = tx
		p.Error = e
		res(p)
	}
}
func TableOnSessionTransactionCommit(t Table, c *context.Context, session tableSessionInfo, tx tableTransactionInfo) func(error) {
	var p TableSessionTransactionCommitStartInfo
	p.Context = c
	p.Session = session
	p.Tx = tx
	res := t.onSessionTransactionCommit(p)
	return func(e error) {
		var p TableSessionTransactionCommitDoneInfo
		p.Error = e
		res(p)
	}
}
func TableOnSessionTransactionRollback(t Table, c *context.Context, session tableSessionInfo, tx tableTransactionInfo) func(error) {
	var p TableSessionTransactionRollbackStartInfo
	p.Context = c
	p.Session = session
	p.Tx = tx
	res := t.onSessionTransactionRollback(p)
	return func(e error) {
		var p TableSessionTransactionRollbackDoneInfo
		p.Error = e
		res(p)
	}
}
func TableOnPoolStateChange(t Table, size int, event string) {
	var p TablePooStateChangeInfo
	p.Size = size
	p.Event = event
	t.onPoolStateChange(p)
}
func TableOnPoolSessionNew(t Table, c *context.Context) func(session tableSessionInfo, _ error) {
	var p TablePoolSessionNewStartInfo
	p.Context = c
	res := t.onPoolSessionNew(p)
	return func(session tableSessionInfo, e error) {
		var p TablePoolSessionNewDoneInfo
		p.Session = session
		p.Error = e
		res(p)
	}
}
func TableOnPoolSessionClose(t Table, c *context.Context, session tableSessionInfo) func() {
	var p TablePoolSessionCloseStartInfo
	p.Context = c
	p.Session = session
	res := t.onPoolSessionClose(p)
	return func() {
		var p TablePoolSessionCloseDoneInfo
		res(p)
	}
}
func TableOnPoolPut(t Table, c *context.Context, session tableSessionInfo) func(error) {
	var p TablePoolPutStartInfo
	p.Context = c
	p.Session = session
	res := t.onPoolPut(p)
	return func(e error) {
		var p TablePoolPutDoneInfo
		p.Error = e
		res(p)
	}
}
func TableOnPoolGet(t Table, c *context.Context) func(session tableSessionInfo, attempts int, _ error) {
	var p TablePoolGetStartInfo
	p.Context = c
	res := t.onPoolGet(p)
	return func(session tableSessionInfo, attempts int, e error) {
		var p TablePoolGetDoneInfo
		p.Session = session
		p.Attempts = attempts
		p.Error = e
		res(p)
	}
}
func TableOnPoolWait(t Table, c *context.Context) func(session tableSessionInfo, _ error) {
	var p TablePoolWaitStartInfo
	p.Context = c
	res := t.onPoolWait(p)
	return func(session tableSessionInfo, e error) {
		var p TablePoolWaitDoneInfo
		p.Session = session
		p.Error = e
		res(p)
	}
}
