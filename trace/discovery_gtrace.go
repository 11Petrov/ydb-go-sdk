// Code generated by gtrace. DO NOT EDIT.

package trace

import (
	"context"
)

// Compose returns a new Discovery which has functional fields composed
// both from t and x.
func (t Discovery) Compose(x Discovery) (ret Discovery) {
	switch {
	case t.OnDiscover == nil:
		ret.OnDiscover = x.OnDiscover
	case x.OnDiscover == nil:
		ret.OnDiscover = t.OnDiscover
	default:
		h1 := t.OnDiscover
		h2 := x.OnDiscover
		ret.OnDiscover = func(d DiscoverStartInfo) func(DiscoverDoneInfo) {
			r1 := h1(d)
			r2 := h2(d)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(d DiscoverDoneInfo) {
					r1(d)
					r2(d)
				}
			}
		}
	}
	switch {
	case t.OnWhoAmI == nil:
		ret.OnWhoAmI = x.OnWhoAmI
	case x.OnWhoAmI == nil:
		ret.OnWhoAmI = t.OnWhoAmI
	default:
		h1 := t.OnWhoAmI
		h2 := x.OnWhoAmI
		ret.OnWhoAmI = func(w WhoAmIStartInfo) func(WhoAmIDoneInfo) {
			r1 := h1(w)
			r2 := h2(w)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(w WhoAmIDoneInfo) {
					r1(w)
					r2(w)
				}
			}
		}
	}
	return ret
}
func (t Discovery) onDiscover(d DiscoverStartInfo) func(DiscoverDoneInfo) {
	fn := t.OnDiscover
	if fn == nil {
		return func(DiscoverDoneInfo) {
			return
		}
	}
	res := fn(d)
	if res == nil {
		return func(DiscoverDoneInfo) {
			return
		}
	}
	return res
}
func (t Discovery) onWhoAmI(w WhoAmIStartInfo) func(WhoAmIDoneInfo) {
	fn := t.OnWhoAmI
	if fn == nil {
		return func(WhoAmIDoneInfo) {
			return
		}
	}
	res := fn(w)
	if res == nil {
		return func(WhoAmIDoneInfo) {
			return
		}
	}
	return res
}
func DiscoveryOnDiscover(t Discovery, c *context.Context, address string, database string) func(location string, endpoints []EndpointInfo, _ error) {
	var p DiscoverStartInfo
	p.Context = c
	p.Address = address
	p.Database = database
	res := t.onDiscover(p)
	return func(location string, endpoints []EndpointInfo, e error) {
		var p DiscoverDoneInfo
		p.Location = location
		p.Endpoints = endpoints
		p.Error = e
		res(p)
	}
}
func DiscoveryOnWhoAmI(t Discovery, c *context.Context) func(user string, groups []string, _ error) {
	var p WhoAmIStartInfo
	p.Context = c
	res := t.onWhoAmI(p)
	return func(user string, groups []string, e error) {
		var p WhoAmIDoneInfo
		p.User = user
		p.Groups = groups
		p.Error = e
		res(p)
	}
}
