// Code generated by gtrace. DO NOT EDIT.

package trace

import (
	"context"
)

// Compose returns a new Driver which has functional fields composed
// both from t and x.
func (t Driver) Compose(x Driver) (ret Driver) {
	switch {
	case t.OnConnNew == nil:
		ret.OnConnNew = x.OnConnNew
	case x.OnConnNew == nil:
		ret.OnConnNew = t.OnConnNew
	default:
		h1 := t.OnConnNew
		h2 := x.OnConnNew
		ret.OnConnNew = func(c ConnNewInfo) {
			h1(c)
			h2(c)
		}
	}
	switch {
	case t.OnConnClose == nil:
		ret.OnConnClose = x.OnConnClose
	case x.OnConnClose == nil:
		ret.OnConnClose = t.OnConnClose
	default:
		h1 := t.OnConnClose
		h2 := x.OnConnClose
		ret.OnConnClose = func(c ConnCloseInfo) {
			h1(c)
			h2(c)
		}
	}
	switch {
	case t.OnConnDial == nil:
		ret.OnConnDial = x.OnConnDial
	case x.OnConnDial == nil:
		ret.OnConnDial = t.OnConnDial
	default:
		h1 := t.OnConnDial
		h2 := x.OnConnDial
		ret.OnConnDial = func(c ConnDialStartInfo) func(ConnDialDoneInfo) {
			r1 := h1(c)
			r2 := h2(c)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(c ConnDialDoneInfo) {
					r1(c)
					r2(c)
				}
			}
		}
	}
	switch {
	case t.OnConnDisconnect == nil:
		ret.OnConnDisconnect = x.OnConnDisconnect
	case x.OnConnDisconnect == nil:
		ret.OnConnDisconnect = t.OnConnDisconnect
	default:
		h1 := t.OnConnDisconnect
		h2 := x.OnConnDisconnect
		ret.OnConnDisconnect = func(c ConnDisconnectStartInfo) func(ConnDisconnectDoneInfo) {
			r1 := h1(c)
			r2 := h2(c)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(c ConnDisconnectDoneInfo) {
					r1(c)
					r2(c)
				}
			}
		}
	}
	switch {
	case t.OnConnStateChenge == nil:
		ret.OnConnStateChenge = x.OnConnStateChenge
	case x.OnConnStateChenge == nil:
		ret.OnConnStateChenge = t.OnConnStateChenge
	default:
		h1 := t.OnConnStateChenge
		h2 := x.OnConnStateChenge
		ret.OnConnStateChenge = func(c ConnStateChangeStartInfo) func(ConnStateChangeDoneInfo) {
			r1 := h1(c)
			r2 := h2(c)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(c ConnStateChangeDoneInfo) {
					r1(c)
					r2(c)
				}
			}
		}
	}
	switch {
	case t.OnClusterGet == nil:
		ret.OnClusterGet = x.OnClusterGet
	case x.OnClusterGet == nil:
		ret.OnClusterGet = t.OnClusterGet
	default:
		h1 := t.OnClusterGet
		h2 := x.OnClusterGet
		ret.OnClusterGet = func(c ClusterGetStartInfo) func(ClusterGetDoneInfo) {
			r1 := h1(c)
			r2 := h2(c)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(c ClusterGetDoneInfo) {
					r1(c)
					r2(c)
				}
			}
		}
	}
	switch {
	case t.OnClusterInsert == nil:
		ret.OnClusterInsert = x.OnClusterInsert
	case x.OnClusterInsert == nil:
		ret.OnClusterInsert = t.OnClusterInsert
	default:
		h1 := t.OnClusterInsert
		h2 := x.OnClusterInsert
		ret.OnClusterInsert = func(c ClusterInsertStartInfo) func(ClusterInsertDoneInfo) {
			r1 := h1(c)
			r2 := h2(c)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(c ClusterInsertDoneInfo) {
					r1(c)
					r2(c)
				}
			}
		}
	}
	switch {
	case t.OnClusterUpdate == nil:
		ret.OnClusterUpdate = x.OnClusterUpdate
	case x.OnClusterUpdate == nil:
		ret.OnClusterUpdate = t.OnClusterUpdate
	default:
		h1 := t.OnClusterUpdate
		h2 := x.OnClusterUpdate
		ret.OnClusterUpdate = func(c ClusterUpdateStartInfo) func(ClusterUpdateDoneInfo) {
			r1 := h1(c)
			r2 := h2(c)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(c ClusterUpdateDoneInfo) {
					r1(c)
					r2(c)
				}
			}
		}
	}
	switch {
	case t.OnClusterRemove == nil:
		ret.OnClusterRemove = x.OnClusterRemove
	case x.OnClusterRemove == nil:
		ret.OnClusterRemove = t.OnClusterRemove
	default:
		h1 := t.OnClusterRemove
		h2 := x.OnClusterRemove
		ret.OnClusterRemove = func(c ClusterRemoveStartInfo) func(ClusterRemoveDoneInfo) {
			r1 := h1(c)
			r2 := h2(c)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(c ClusterRemoveDoneInfo) {
					r1(c)
					r2(c)
				}
			}
		}
	}
	switch {
	case t.OnPessimizeNode == nil:
		ret.OnPessimizeNode = x.OnPessimizeNode
	case x.OnPessimizeNode == nil:
		ret.OnPessimizeNode = t.OnPessimizeNode
	default:
		h1 := t.OnPessimizeNode
		h2 := x.OnPessimizeNode
		ret.OnPessimizeNode = func(p PessimizeNodeStartInfo) func(PessimizeNodeDoneInfo) {
			r1 := h1(p)
			r2 := h2(p)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(p PessimizeNodeDoneInfo) {
					r1(p)
					r2(p)
				}
			}
		}
	}
	switch {
	case t.OnGetCredentials == nil:
		ret.OnGetCredentials = x.OnGetCredentials
	case x.OnGetCredentials == nil:
		ret.OnGetCredentials = t.OnGetCredentials
	default:
		h1 := t.OnGetCredentials
		h2 := x.OnGetCredentials
		ret.OnGetCredentials = func(g GetCredentialsStartInfo) func(GetCredentialsDoneInfo) {
			r1 := h1(g)
			r2 := h2(g)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(g GetCredentialsDoneInfo) {
					r1(g)
					r2(g)
				}
			}
		}
	}
	switch {
	case t.OnDiscovery == nil:
		ret.OnDiscovery = x.OnDiscovery
	case x.OnDiscovery == nil:
		ret.OnDiscovery = t.OnDiscovery
	default:
		h1 := t.OnDiscovery
		h2 := x.OnDiscovery
		ret.OnDiscovery = func(d DiscoveryStartInfo) func(DiscoveryDoneInfo) {
			r1 := h1(d)
			r2 := h2(d)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(d DiscoveryDoneInfo) {
					r1(d)
					r2(d)
				}
			}
		}
	}
	switch {
	case t.OnOperation == nil:
		ret.OnOperation = x.OnOperation
	case x.OnOperation == nil:
		ret.OnOperation = t.OnOperation
	default:
		h1 := t.OnOperation
		h2 := x.OnOperation
		ret.OnOperation = func(o OperationStartInfo) func(OperationDoneInfo) {
			r1 := h1(o)
			r2 := h2(o)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(o OperationDoneInfo) {
					r1(o)
					r2(o)
				}
			}
		}
	}
	switch {
	case t.OnStream == nil:
		ret.OnStream = x.OnStream
	case x.OnStream == nil:
		ret.OnStream = t.OnStream
	default:
		h1 := t.OnStream
		h2 := x.OnStream
		ret.OnStream = func(s StreamStartInfo) func(StreamRecvDoneInfo) func(StreamDoneInfo) {
			r1 := h1(s)
			r2 := h2(s)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(s StreamRecvDoneInfo) func(StreamDoneInfo) {
					r11 := r1(s)
					r21 := r2(s)
					switch {
					case r11 == nil:
						return r21
					case r21 == nil:
						return r11
					default:
						return func(s StreamDoneInfo) {
							r11(s)
							r21(s)
						}
					}
				}
			}
		}
	}
	return ret
}
func (t Driver) onConnNew(c1 ConnNewInfo) {
	fn := t.OnConnNew
	if fn == nil {
		return
	}
	fn(c1)
}
func (t Driver) onConnClose(c1 ConnCloseInfo) {
	fn := t.OnConnClose
	if fn == nil {
		return
	}
	fn(c1)
}
func (t Driver) onConnDial(c1 ConnDialStartInfo) func(ConnDialDoneInfo) {
	fn := t.OnConnDial
	if fn == nil {
		return func(ConnDialDoneInfo) {
			return
		}
	}
	res := fn(c1)
	if res == nil {
		return func(ConnDialDoneInfo) {
			return
		}
	}
	return res
}
func (t Driver) onConnDisconnect(c1 ConnDisconnectStartInfo) func(ConnDisconnectDoneInfo) {
	fn := t.OnConnDisconnect
	if fn == nil {
		return func(ConnDisconnectDoneInfo) {
			return
		}
	}
	res := fn(c1)
	if res == nil {
		return func(ConnDisconnectDoneInfo) {
			return
		}
	}
	return res
}
func (t Driver) onConnStateChenge(c1 ConnStateChangeStartInfo) func(ConnStateChangeDoneInfo) {
	fn := t.OnConnStateChenge
	if fn == nil {
		return func(ConnStateChangeDoneInfo) {
			return
		}
	}
	res := fn(c1)
	if res == nil {
		return func(ConnStateChangeDoneInfo) {
			return
		}
	}
	return res
}
func (t Driver) onClusterGet(c1 ClusterGetStartInfo) func(ClusterGetDoneInfo) {
	fn := t.OnClusterGet
	if fn == nil {
		return func(ClusterGetDoneInfo) {
			return
		}
	}
	res := fn(c1)
	if res == nil {
		return func(ClusterGetDoneInfo) {
			return
		}
	}
	return res
}
func (t Driver) onClusterInsert(c1 ClusterInsertStartInfo) func(ClusterInsertDoneInfo) {
	fn := t.OnClusterInsert
	if fn == nil {
		return func(ClusterInsertDoneInfo) {
			return
		}
	}
	res := fn(c1)
	if res == nil {
		return func(ClusterInsertDoneInfo) {
			return
		}
	}
	return res
}
func (t Driver) onClusterUpdate(c1 ClusterUpdateStartInfo) func(ClusterUpdateDoneInfo) {
	fn := t.OnClusterUpdate
	if fn == nil {
		return func(ClusterUpdateDoneInfo) {
			return
		}
	}
	res := fn(c1)
	if res == nil {
		return func(ClusterUpdateDoneInfo) {
			return
		}
	}
	return res
}
func (t Driver) onClusterRemove(c1 ClusterRemoveStartInfo) func(ClusterRemoveDoneInfo) {
	fn := t.OnClusterRemove
	if fn == nil {
		return func(ClusterRemoveDoneInfo) {
			return
		}
	}
	res := fn(c1)
	if res == nil {
		return func(ClusterRemoveDoneInfo) {
			return
		}
	}
	return res
}
func (t Driver) onPessimizeNode(p PessimizeNodeStartInfo) func(PessimizeNodeDoneInfo) {
	fn := t.OnPessimizeNode
	if fn == nil {
		return func(PessimizeNodeDoneInfo) {
			return
		}
	}
	res := fn(p)
	if res == nil {
		return func(PessimizeNodeDoneInfo) {
			return
		}
	}
	return res
}
func (t Driver) onGetCredentials(g GetCredentialsStartInfo) func(GetCredentialsDoneInfo) {
	fn := t.OnGetCredentials
	if fn == nil {
		return func(GetCredentialsDoneInfo) {
			return
		}
	}
	res := fn(g)
	if res == nil {
		return func(GetCredentialsDoneInfo) {
			return
		}
	}
	return res
}
func (t Driver) onDiscovery(d DiscoveryStartInfo) func(DiscoveryDoneInfo) {
	fn := t.OnDiscovery
	if fn == nil {
		return func(DiscoveryDoneInfo) {
			return
		}
	}
	res := fn(d)
	if res == nil {
		return func(DiscoveryDoneInfo) {
			return
		}
	}
	return res
}
func (t Driver) onOperation(o OperationStartInfo) func(OperationDoneInfo) {
	fn := t.OnOperation
	if fn == nil {
		return func(OperationDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OperationDoneInfo) {
			return
		}
	}
	return res
}
func (t Driver) onStream(s StreamStartInfo) func(StreamRecvDoneInfo) func(StreamDoneInfo) {
	fn := t.OnStream
	if fn == nil {
		return func(StreamRecvDoneInfo) func(StreamDoneInfo) {
			return func(StreamDoneInfo) {
				return
			}
		}
	}
	res := fn(s)
	if res == nil {
		return func(StreamRecvDoneInfo) func(StreamDoneInfo) {
			return func(StreamDoneInfo) {
				return
			}
		}
	}
	return func(s StreamRecvDoneInfo) func(StreamDoneInfo) {
		res := res(s)
		if res == nil {
			return func(StreamDoneInfo) {
				return
			}
		}
		return res
	}
}
func DriverOnConnNew(t Driver, e Endpoint, state ConnState) {
	var p ConnNewInfo
	p.Endpoint = e
	p.State = state
	t.onConnNew(p)
}
func DriverOnConnClose(t Driver, e Endpoint, state ConnState) {
	var p ConnCloseInfo
	p.Endpoint = e
	p.State = state
	t.onConnClose(p)
}
func DriverOnConnDial(t Driver, c context.Context, e Endpoint, state ConnState) func(_ error, state ConnState) {
	var p ConnDialStartInfo
	p.Context = c
	p.Endpoint = e
	p.State = state
	res := t.onConnDial(p)
	return func(e error, state ConnState) {
		var p ConnDialDoneInfo
		p.Error = e
		p.State = state
		res(p)
	}
}
func DriverOnConnDisconnect(t Driver, e Endpoint, state ConnState) func(_ error, state ConnState) {
	var p ConnDisconnectStartInfo
	p.Endpoint = e
	p.State = state
	res := t.onConnDisconnect(p)
	return func(e error, state ConnState) {
		var p ConnDisconnectDoneInfo
		p.Error = e
		p.State = state
		res(p)
	}
}
func DriverOnConnStateChenge(t Driver, e Endpoint, state ConnState) func(state ConnState) {
	var p ConnStateChangeStartInfo
	p.Endpoint = e
	p.State = state
	res := t.onConnStateChenge(p)
	return func(state ConnState) {
		var p ConnStateChangeDoneInfo
		p.State = state
		res(p)
	}
}
func DriverOnClusterGet(t Driver, c context.Context) func(Endpoint, error) {
	var p ClusterGetStartInfo
	p.Context = c
	res := t.onClusterGet(p)
	return func(e Endpoint, e1 error) {
		var p ClusterGetDoneInfo
		p.Endpoint = e
		p.Error = e1
		res(p)
	}
}
func DriverOnClusterInsert(t Driver, e Endpoint) func(clusterSize int, state ConnState) {
	var p ClusterInsertStartInfo
	p.Endpoint = e
	res := t.onClusterInsert(p)
	return func(clusterSize int, state ConnState) {
		var p ClusterInsertDoneInfo
		p.ClusterSize = clusterSize
		p.State = state
		res(p)
	}
}
func DriverOnClusterUpdate(t Driver, e Endpoint) func(state ConnState) {
	var p ClusterUpdateStartInfo
	p.Endpoint = e
	res := t.onClusterUpdate(p)
	return func(state ConnState) {
		var p ClusterUpdateDoneInfo
		p.State = state
		res(p)
	}
}
func DriverOnClusterRemove(t Driver, e Endpoint) func(clusterSize int, state ConnState) {
	var p ClusterRemoveStartInfo
	p.Endpoint = e
	res := t.onClusterRemove(p)
	return func(clusterSize int, state ConnState) {
		var p ClusterRemoveDoneInfo
		p.ClusterSize = clusterSize
		p.State = state
		res(p)
	}
}
func DriverOnPessimizeNode(t Driver, c context.Context, e Endpoint, state ConnState, cause error) func(state ConnState, _ error) {
	var p PessimizeNodeStartInfo
	p.Context = c
	p.Endpoint = e
	p.State = state
	p.Cause = cause
	res := t.onPessimizeNode(p)
	return func(state ConnState, e error) {
		var p PessimizeNodeDoneInfo
		p.State = state
		p.Error = e
		res(p)
	}
}
func DriverOnGetCredentials(t Driver, c context.Context) func(tokenOk bool, _ error) {
	var p GetCredentialsStartInfo
	p.Context = c
	res := t.onGetCredentials(p)
	return func(tokenOk bool, e error) {
		var p GetCredentialsDoneInfo
		p.TokenOk = tokenOk
		p.Error = e
		res(p)
	}
}
func DriverOnDiscovery(t Driver, c context.Context) func(endpoints map[Endpoint]ConnState, _ error) {
	var p DiscoveryStartInfo
	p.Context = c
	res := t.onDiscovery(p)
	return func(endpoints map[Endpoint]ConnState, e error) {
		var p DiscoveryDoneInfo
		p.Endpoints = endpoints
		p.Error = e
		res(p)
	}
}
func DriverOnOperation(t Driver, c context.Context, e Endpoint, m Method, params OperationParams) func(opID string, issues []Issue, _ error) {
	var p OperationStartInfo
	p.Context = c
	p.Endpoint = e
	p.Method = m
	p.Params = params
	res := t.onOperation(p)
	return func(opID string, issues []Issue, e error) {
		var p OperationDoneInfo
		p.OpID = opID
		p.Issues = issues
		p.Error = e
		res(p)
	}
}
func DriverOnStream(t Driver, c context.Context, e Endpoint, m Method) func(error) func(error) {
	var p StreamStartInfo
	p.Context = c
	p.Endpoint = e
	p.Method = m
	res := t.onStream(p)
	return func(e error) func(error) {
		var p StreamRecvDoneInfo
		p.Error = e
		res := res(p)
		return func(e error) {
			var p StreamDoneInfo
			p.Error = e
			res(p)
		}
	}
}
