// Code generated by gtrace. DO NOT EDIT.

package trace

import (
	"context"
)

// topicComposeOptions is a holder of options
type topicComposeOptions struct {
	panicCallback func(e interface{})
}

// TopicOption specified Topic compose option
type TopicComposeOption func(o *topicComposeOptions)

// WithTopicPanicCallback specified behavior on panic
func WithTopicPanicCallback(cb func(e interface{})) TopicComposeOption {
	return func(o *topicComposeOptions) {
		o.panicCallback = cb
	}
}

// Compose returns a new Topic which has functional fields composed both from t and x.
func (t Topic) Compose(x Topic, opts ...TopicComposeOption) (ret Topic) {
	options := topicComposeOptions{}
	for _, opt := range opts {
		opt(&options)
	}
	{
		h1 := t.OnReaderConnect
		h2 := x.OnReaderConnect
		ret.OnReaderConnect = func(o OnReaderConnectStartInfo) func(OnReaderConnectDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(OnReaderConnectDoneInfo)
			if h1 != nil {
				r = h1(o)
			}
			if h2 != nil {
				r1 = h2(o)
			}
			return func(o OnReaderConnectDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(o)
				}
				if r1 != nil {
					r1(o)
				}
			}
		}
	}
	{
		h1 := t.OnReaderReconnect
		h2 := x.OnReaderReconnect
		ret.OnReaderReconnect = func(o OnReaderReconnectStartInfo) func(OnReaderReconnectDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(OnReaderReconnectDoneInfo)
			if h1 != nil {
				r = h1(o)
			}
			if h2 != nil {
				r1 = h2(o)
			}
			return func(o OnReaderReconnectDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(o)
				}
				if r1 != nil {
					r1(o)
				}
			}
		}
	}
	{
		h1 := t.OnReaderReconnectRequest
		h2 := x.OnReaderReconnectRequest
		ret.OnReaderReconnectRequest = func(o OnReaderReconnectRequestInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(o)
			}
			if h2 != nil {
				h2(o)
			}
		}
	}
	{
		h1 := t.OnReaderReadMessages
		h2 := x.OnReaderReadMessages
		ret.OnReaderReadMessages = func(o OnReaderReadMessagesStartInfo) func(OnReaderReadMessagesDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(OnReaderReadMessagesDoneInfo)
			if h1 != nil {
				r = h1(o)
			}
			if h2 != nil {
				r1 = h2(o)
			}
			return func(o OnReaderReadMessagesDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(o)
				}
				if r1 != nil {
					r1(o)
				}
			}
		}
	}
	{
		h1 := t.OnReaderCommit
		h2 := x.OnReaderCommit
		ret.OnReaderCommit = func(o OnReaderCommitStartInfo) func(OnReaderCommitDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(OnReaderCommitDoneInfo)
			if h1 != nil {
				r = h1(o)
			}
			if h2 != nil {
				r1 = h2(o)
			}
			return func(o OnReaderCommitDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(o)
				}
				if r1 != nil {
					r1(o)
				}
			}
		}
	}
	{
		h1 := t.OnReaderStreamSentCommitMessage
		h2 := x.OnReaderStreamSentCommitMessage
		ret.OnReaderStreamSentCommitMessage = func(o OnReaderStreamSentCommitMessageStartInfo) func(OnReaderStreamSentCommitMessageDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(OnReaderStreamSentCommitMessageDoneInfo)
			if h1 != nil {
				r = h1(o)
			}
			if h2 != nil {
				r1 = h2(o)
			}
			return func(o OnReaderStreamSentCommitMessageDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(o)
				}
				if r1 != nil {
					r1(o)
				}
			}
		}
	}
	{
		h1 := t.OnReaderStreamCommittedNotify
		h2 := x.OnReaderStreamCommittedNotify
		ret.OnReaderStreamCommittedNotify = func(o OnReaderStreamCommittedInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(o)
			}
			if h2 != nil {
				h2(o)
			}
		}
	}
	{
		h1 := t.OnReaderStreamPartitionReadStart
		h2 := x.OnReaderStreamPartitionReadStart
		ret.OnReaderStreamPartitionReadStart = func(o OnReaderStreamPartitionReadStartInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(o)
			}
			if h2 != nil {
				h2(o)
			}
		}
	}
	{
		h1 := t.OnReaderStreamPartitionReadStop
		h2 := x.OnReaderStreamPartitionReadStop
		ret.OnReaderStreamPartitionReadStop = func(o OnReaderStreamPartitionReadStopInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(o)
			}
			if h2 != nil {
				h2(o)
			}
		}
	}
	{
		h1 := t.OnReaderStreamClose
		h2 := x.OnReaderStreamClose
		ret.OnReaderStreamClose = func(o OnReaderStreamCloseStartInfo) func(OnReaderStreamCloseDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(OnReaderStreamCloseDoneInfo)
			if h1 != nil {
				r = h1(o)
			}
			if h2 != nil {
				r1 = h2(o)
			}
			return func(o OnReaderStreamCloseDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(o)
				}
				if r1 != nil {
					r1(o)
				}
			}
		}
	}
	{
		h1 := t.OnReaderStreamInit
		h2 := x.OnReaderStreamInit
		ret.OnReaderStreamInit = func(o OnReaderStreamInitStartInfo) func(OnReaderStreamInitDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(OnReaderStreamInitDoneInfo)
			if h1 != nil {
				r = h1(o)
			}
			if h2 != nil {
				r1 = h2(o)
			}
			return func(o OnReaderStreamInitDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(o)
				}
				if r1 != nil {
					r1(o)
				}
			}
		}
	}
	{
		h1 := t.OnReaderStreamError
		h2 := x.OnReaderStreamError
		ret.OnReaderStreamError = func(o OnReaderStreamErrorInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(o)
			}
			if h2 != nil {
				h2(o)
			}
		}
	}
	{
		h1 := t.OnReaderStreamSentDataRequest
		h2 := x.OnReaderStreamSentDataRequest
		ret.OnReaderStreamSentDataRequest = func(o OnReaderStreamSentDataRequestInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(o)
			}
			if h2 != nil {
				h2(o)
			}
		}
	}
	{
		h1 := t.OnReaderStreamReceiveDataResponse
		h2 := x.OnReaderStreamReceiveDataResponse
		ret.OnReaderStreamReceiveDataResponse = func(o OnReaderStreamReceiveDataResponseStartInfo) func(OnReaderStreamReceiveDataResponseDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(OnReaderStreamReceiveDataResponseDoneInfo)
			if h1 != nil {
				r = h1(o)
			}
			if h2 != nil {
				r1 = h2(o)
			}
			return func(o OnReaderStreamReceiveDataResponseDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(o)
				}
				if r1 != nil {
					r1(o)
				}
			}
		}
	}
	{
		h1 := t.OnReaderStreamReadMessages
		h2 := x.OnReaderStreamReadMessages
		ret.OnReaderStreamReadMessages = func(o OnReaderStreamReadMessagesStartInfo) func(OnReaderStreamReadMessagesDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(OnReaderStreamReadMessagesDoneInfo)
			if h1 != nil {
				r = h1(o)
			}
			if h2 != nil {
				r1 = h2(o)
			}
			return func(o OnReaderStreamReadMessagesDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(o)
				}
				if r1 != nil {
					r1(o)
				}
			}
		}
	}
	{
		h1 := t.OnReaderStreamUnknownGrpcMessage
		h2 := x.OnReaderStreamUnknownGrpcMessage
		ret.OnReaderStreamUnknownGrpcMessage = func(o OnReadStreamUnknownGrpcMessageInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(o)
			}
			if h2 != nil {
				h2(o)
			}
		}
	}
	{
		h1 := t.OnReaderStreamUpdateToken
		h2 := x.OnReaderStreamUpdateToken
		ret.OnReaderStreamUpdateToken = func(o OnReadStreamUpdateTokenStartInfo) func(OnReadStreamUpdateTokenMiddleTokenReceivedInfo) func(OnReadStreamUpdateTokenDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(OnReadStreamUpdateTokenMiddleTokenReceivedInfo) func(OnReadStreamUpdateTokenDoneInfo)
			if h1 != nil {
				r = h1(o)
			}
			if h2 != nil {
				r1 = h2(o)
			}
			return func(o OnReadStreamUpdateTokenMiddleTokenReceivedInfo) func(OnReadStreamUpdateTokenDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				var r2, r3 func(OnReadStreamUpdateTokenDoneInfo)
				if r != nil {
					r2 = r(o)
				}
				if r1 != nil {
					r3 = r1(o)
				}
				return func(o OnReadStreamUpdateTokenDoneInfo) {
					if options.panicCallback != nil {
						defer func() {
							if e := recover(); e != nil {
								options.panicCallback(e)
							}
						}()
					}
					if r2 != nil {
						r2(o)
					}
					if r3 != nil {
						r3(o)
					}
				}
			}
		}
	}
	return ret
}
func (t Topic) onReaderConnect(o OnReaderConnectStartInfo) func(OnReaderConnectDoneInfo) {
	fn := t.OnReaderConnect
	if fn == nil {
		return func(OnReaderConnectDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnReaderConnectDoneInfo) {
			return
		}
	}
	return res
}
func (t Topic) onReaderReconnect(o OnReaderReconnectStartInfo) func(OnReaderReconnectDoneInfo) {
	fn := t.OnReaderReconnect
	if fn == nil {
		return func(OnReaderReconnectDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnReaderReconnectDoneInfo) {
			return
		}
	}
	return res
}
func (t Topic) onReaderReconnectRequest(o OnReaderReconnectRequestInfo) {
	fn := t.OnReaderReconnectRequest
	if fn == nil {
		return
	}
	fn(o)
}
func (t Topic) onReaderReadMessages(o OnReaderReadMessagesStartInfo) func(OnReaderReadMessagesDoneInfo) {
	fn := t.OnReaderReadMessages
	if fn == nil {
		return func(OnReaderReadMessagesDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnReaderReadMessagesDoneInfo) {
			return
		}
	}
	return res
}
func (t Topic) onReaderCommit(o OnReaderCommitStartInfo) func(OnReaderCommitDoneInfo) {
	fn := t.OnReaderCommit
	if fn == nil {
		return func(OnReaderCommitDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnReaderCommitDoneInfo) {
			return
		}
	}
	return res
}
func (t Topic) onReaderStreamSentCommitMessage(o OnReaderStreamSentCommitMessageStartInfo) func(OnReaderStreamSentCommitMessageDoneInfo) {
	fn := t.OnReaderStreamSentCommitMessage
	if fn == nil {
		return func(OnReaderStreamSentCommitMessageDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnReaderStreamSentCommitMessageDoneInfo) {
			return
		}
	}
	return res
}
func (t Topic) onReaderStreamCommittedNotify(o OnReaderStreamCommittedInfo) {
	fn := t.OnReaderStreamCommittedNotify
	if fn == nil {
		return
	}
	fn(o)
}
func (t Topic) onReaderStreamPartitionReadStart(o OnReaderStreamPartitionReadStartInfo) {
	fn := t.OnReaderStreamPartitionReadStart
	if fn == nil {
		return
	}
	fn(o)
}
func (t Topic) onReaderStreamPartitionReadStop(o OnReaderStreamPartitionReadStopInfo) {
	fn := t.OnReaderStreamPartitionReadStop
	if fn == nil {
		return
	}
	fn(o)
}
func (t Topic) onReaderStreamClose(o OnReaderStreamCloseStartInfo) func(OnReaderStreamCloseDoneInfo) {
	fn := t.OnReaderStreamClose
	if fn == nil {
		return func(OnReaderStreamCloseDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnReaderStreamCloseDoneInfo) {
			return
		}
	}
	return res
}
func (t Topic) onReaderStreamInit(o OnReaderStreamInitStartInfo) func(OnReaderStreamInitDoneInfo) {
	fn := t.OnReaderStreamInit
	if fn == nil {
		return func(OnReaderStreamInitDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnReaderStreamInitDoneInfo) {
			return
		}
	}
	return res
}
func (t Topic) onReaderStreamError(o OnReaderStreamErrorInfo) {
	fn := t.OnReaderStreamError
	if fn == nil {
		return
	}
	fn(o)
}
func (t Topic) onReaderStreamSentDataRequest(o OnReaderStreamSentDataRequestInfo) {
	fn := t.OnReaderStreamSentDataRequest
	if fn == nil {
		return
	}
	fn(o)
}
func (t Topic) onReaderStreamReceiveDataResponse(o OnReaderStreamReceiveDataResponseStartInfo) func(OnReaderStreamReceiveDataResponseDoneInfo) {
	fn := t.OnReaderStreamReceiveDataResponse
	if fn == nil {
		return func(OnReaderStreamReceiveDataResponseDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnReaderStreamReceiveDataResponseDoneInfo) {
			return
		}
	}
	return res
}
func (t Topic) onReaderStreamReadMessages(o OnReaderStreamReadMessagesStartInfo) func(OnReaderStreamReadMessagesDoneInfo) {
	fn := t.OnReaderStreamReadMessages
	if fn == nil {
		return func(OnReaderStreamReadMessagesDoneInfo) {
			return
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnReaderStreamReadMessagesDoneInfo) {
			return
		}
	}
	return res
}
func (t Topic) onReaderStreamUnknownGrpcMessage(o OnReadStreamUnknownGrpcMessageInfo) {
	fn := t.OnReaderStreamUnknownGrpcMessage
	if fn == nil {
		return
	}
	fn(o)
}
func (t Topic) onReaderStreamUpdateToken(o OnReadStreamUpdateTokenStartInfo) func(OnReadStreamUpdateTokenMiddleTokenReceivedInfo) func(OnReadStreamUpdateTokenDoneInfo) {
	fn := t.OnReaderStreamUpdateToken
	if fn == nil {
		return func(OnReadStreamUpdateTokenMiddleTokenReceivedInfo) func(OnReadStreamUpdateTokenDoneInfo) {
			return func(OnReadStreamUpdateTokenDoneInfo) {
				return
			}
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnReadStreamUpdateTokenMiddleTokenReceivedInfo) func(OnReadStreamUpdateTokenDoneInfo) {
			return func(OnReadStreamUpdateTokenDoneInfo) {
				return
			}
		}
	}
	return func(o OnReadStreamUpdateTokenMiddleTokenReceivedInfo) func(OnReadStreamUpdateTokenDoneInfo) {
		res := res(o)
		if res == nil {
			return func(OnReadStreamUpdateTokenDoneInfo) {
				return
			}
		}
		return res
	}
}
func TopicOnReaderConnect(t Topic) func(error) {
	var p OnReaderConnectStartInfo
	res := t.onReaderConnect(p)
	return func(e error) {
		var p OnReaderConnectDoneInfo
		p.Error = e
		res(p)
	}
}
func TopicOnReaderReconnect(t Topic) func(error) {
	var p OnReaderReconnectStartInfo
	res := t.onReaderReconnect(p)
	return func(e error) {
		var p OnReaderReconnectDoneInfo
		p.Error = e
		res(p)
	}
}
func TopicOnReaderReconnectRequest(t Topic, reason error, wasSent bool) {
	var p OnReaderReconnectRequestInfo
	p.Reason = reason
	p.WasSent = wasSent
	t.onReaderReconnectRequest(p)
}
func TopicOnReaderReadMessages(t Topic, requestContext context.Context, minCount int, maxCount int) func(messagesCount int, topic string, partitionID int64, offsetStart int64, offsetEnd int64, _ error) {
	var p OnReaderReadMessagesStartInfo
	p.RequestContext = requestContext
	p.MinCount = minCount
	p.MaxCount = maxCount
	res := t.onReaderReadMessages(p)
	return func(messagesCount int, topic string, partitionID int64, offsetStart int64, offsetEnd int64, e error) {
		var p OnReaderReadMessagesDoneInfo
		p.MessagesCount = messagesCount
		p.Topic = topic
		p.PartitionID = partitionID
		p.OffsetStart = offsetStart
		p.OffsetEnd = offsetEnd
		p.Error = e
		res(p)
	}
}
func TopicOnReaderCommit(t Topic, requestContext context.Context, topic string, partitionID int64, partitionSessionID int64, startOffset int64, endOffset int64) func(error) {
	var p OnReaderCommitStartInfo
	p.RequestContext = requestContext
	p.Topic = topic
	p.PartitionID = partitionID
	p.PartitionSessionID = partitionSessionID
	p.StartOffset = startOffset
	p.EndOffset = endOffset
	res := t.onReaderCommit(p)
	return func(e error) {
		var p OnReaderCommitDoneInfo
		p.Error = e
		res(p)
	}
}
func TopicOnReaderStreamSentCommitMessage(t Topic) func(error) {
	var p OnReaderStreamSentCommitMessageStartInfo
	res := t.onReaderStreamSentCommitMessage(p)
	return func(e error) {
		var p OnReaderStreamSentCommitMessageDoneInfo
		p.Error = e
		res(p)
	}
}
func TopicOnReaderStreamCommittedNotify(t Topic, readerConnectionID string, topic string, partitionID int64, committedOffset int64) {
	var p OnReaderStreamCommittedInfo
	p.ReaderConnectionID = readerConnectionID
	p.Topic = topic
	p.PartitionID = partitionID
	p.CommittedOffset = committedOffset
	t.onReaderStreamCommittedNotify(p)
}
func TopicOnReaderStreamPartitionReadStart(t Topic, readerConnectionID string, partitionContext context.Context, topic string, partitionID int64, readOffset *int64, commitOffset *int64) {
	var p OnReaderStreamPartitionReadStartInfo
	p.ReaderConnectionID = readerConnectionID
	p.PartitionContext = partitionContext
	p.Topic = topic
	p.PartitionID = partitionID
	p.ReadOffset = readOffset
	p.CommitOffset = commitOffset
	t.onReaderStreamPartitionReadStart(p)
}
func TopicOnReaderStreamPartitionReadStop(t Topic, readerConnectionID string, partitionContext context.Context, topic string, partitionID int64, partitionSessionID int64, committedOffset int64, graceful bool) {
	var p OnReaderStreamPartitionReadStopInfo
	p.ReaderConnectionID = readerConnectionID
	p.PartitionContext = partitionContext
	p.Topic = topic
	p.PartitionID = partitionID
	p.PartitionSessionID = partitionSessionID
	p.CommittedOffset = committedOffset
	p.Graceful = graceful
	t.onReaderStreamPartitionReadStop(p)
}
func TopicOnReaderStreamClose(t Topic, readerConnectionID string, closeReason error) func(closeError error) {
	var p OnReaderStreamCloseStartInfo
	p.ReaderConnectionID = readerConnectionID
	p.CloseReason = closeReason
	res := t.onReaderStreamClose(p)
	return func(closeError error) {
		var p OnReaderStreamCloseDoneInfo
		p.CloseError = closeError
		res(p)
	}
}
func TopicOnReaderStreamInit(t Topic, preInitReaderConnectionID string, initRequestInfo TopicReadStreamInitRequestInfo) func(newReaderConnectionID string, _ error) {
	var p OnReaderStreamInitStartInfo
	p.PreInitReaderConnectionID = preInitReaderConnectionID
	p.InitRequestInfo = initRequestInfo
	res := t.onReaderStreamInit(p)
	return func(newReaderConnectionID string, e error) {
		var p OnReaderStreamInitDoneInfo
		p.NewReaderConnectionID = newReaderConnectionID
		p.Error = e
		res(p)
	}
}
func TopicOnReaderStreamError(t Topic, readerConnectionID string, e error) {
	var p OnReaderStreamErrorInfo
	p.ReaderConnectionID = readerConnectionID
	p.Error = e
	t.onReaderStreamError(p)
}
func TopicOnReaderStreamSentDataRequest(t Topic, readerConnectionID string, requestBytes int, localBufferSizeAfterSent int) {
	var p OnReaderStreamSentDataRequestInfo
	p.ReaderConnectionID = readerConnectionID
	p.RequestBytes = requestBytes
	p.LocalBufferSizeAfterSent = localBufferSizeAfterSent
	t.onReaderStreamSentDataRequest(p)
}
func TopicOnReaderStreamReceiveDataResponse(t Topic, readerConnectionID string, localBufferSizeAfterReceive int, dataResponse TopicReaderDataResponseInfo) func(error) {
	var p OnReaderStreamReceiveDataResponseStartInfo
	p.ReaderConnectionID = readerConnectionID
	p.LocalBufferSizeAfterReceive = localBufferSizeAfterReceive
	p.DataResponse = dataResponse
	res := t.onReaderStreamReceiveDataResponse(p)
	return func(e error) {
		var p OnReaderStreamReceiveDataResponseDoneInfo
		p.Error = e
		res(p)
	}
}
func TopicOnReaderStreamReadMessages(t Topic, requestContext context.Context, minCount int, maxCount int, freeBufferCapacity int) func(messagesCount int, topic string, partitionID int64, offsetStart int64, offsetEnd int64, freeBufferCapacity int, _ error) {
	var p OnReaderStreamReadMessagesStartInfo
	p.RequestContext = requestContext
	p.MinCount = minCount
	p.MaxCount = maxCount
	p.FreeBufferCapacity = freeBufferCapacity
	res := t.onReaderStreamReadMessages(p)
	return func(messagesCount int, topic string, partitionID int64, offsetStart int64, offsetEnd int64, freeBufferCapacity int, e error) {
		var p OnReaderStreamReadMessagesDoneInfo
		p.MessagesCount = messagesCount
		p.Topic = topic
		p.PartitionID = partitionID
		p.OffsetStart = offsetStart
		p.OffsetEnd = offsetEnd
		p.FreeBufferCapacity = freeBufferCapacity
		p.Error = e
		res(p)
	}
}
func TopicOnReaderStreamUnknownGrpcMessage(t Topic, readerConnectionID string, e error) {
	var p OnReadStreamUnknownGrpcMessageInfo
	p.ReaderConnectionID = readerConnectionID
	p.Error = e
	t.onReaderStreamUnknownGrpcMessage(p)
}
func TopicOnReaderStreamUpdateToken(t Topic, readerConnectionID string) func(tokenLen int, _ error) func(error) {
	var p OnReadStreamUpdateTokenStartInfo
	p.ReaderConnectionID = readerConnectionID
	res := t.onReaderStreamUpdateToken(p)
	return func(tokenLen int, e error) func(error) {
		var p OnReadStreamUpdateTokenMiddleTokenReceivedInfo
		p.TokenLen = tokenLen
		p.Error = e
		res := res(p)
		return func(e error) {
			var p OnReadStreamUpdateTokenDoneInfo
			p.Error = e
			res(p)
		}
	}
}
