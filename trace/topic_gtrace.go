// Code generated by gtrace. DO NOT EDIT.

package trace

import (
	"context"
)

// topicComposeOptions is a holder of options
type topicComposeOptions struct {
	panicCallback func(e interface{})
}

// TopicOption specified Topic compose option
type TopicComposeOption func(o *topicComposeOptions)

// WithTopicPanicCallback specified behavior on panic
func WithTopicPanicCallback(cb func(e interface{})) TopicComposeOption {
	return func(o *topicComposeOptions) {
		o.panicCallback = cb
	}
}

// Compose returns a new Topic which has functional fields composed both from t and x.
func (t Topic) Compose(x Topic, opts ...TopicComposeOption) (ret Topic) {
	options := topicComposeOptions{}
	for _, opt := range opts {
		opt(&options)
	}
	{
		h1 := t.TableReaderConnect
		h2 := x.TableReaderConnect
		ret.TableReaderConnect = func(t TableReaderConnectStartInfo) func(TableReaderConnectDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TableReaderConnectDoneInfo)
			if h1 != nil {
				r = h1(t)
			}
			if h2 != nil {
				r1 = h2(t)
			}
			return func(t TableReaderConnectDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(t)
				}
				if r1 != nil {
					r1(t)
				}
			}
		}
	}
	{
		h1 := t.TableReaderReconnect
		h2 := x.TableReaderReconnect
		ret.TableReaderReconnect = func(t TableReaderReconnectStartInfo) func(TableReaderReconnectDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TableReaderReconnectDoneInfo)
			if h1 != nil {
				r = h1(t)
			}
			if h2 != nil {
				r1 = h2(t)
			}
			return func(t TableReaderReconnectDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(t)
				}
				if r1 != nil {
					r1(t)
				}
			}
		}
	}
	{
		h1 := t.TableReaderReconnectRequest
		h2 := x.TableReaderReconnectRequest
		ret.TableReaderReconnectRequest = func(t TableReaderReconnectRequestInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(t)
			}
			if h2 != nil {
				h2(t)
			}
		}
	}
	{
		h1 := t.TableReaderReadMessages
		h2 := x.TableReaderReadMessages
		ret.TableReaderReadMessages = func(t TableReaderReadMessagesStartInfo) func(TableReaderReadMessagesDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TableReaderReadMessagesDoneInfo)
			if h1 != nil {
				r = h1(t)
			}
			if h2 != nil {
				r1 = h2(t)
			}
			return func(t TableReaderReadMessagesDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(t)
				}
				if r1 != nil {
					r1(t)
				}
			}
		}
	}
	{
		h1 := t.TableReaderCommit
		h2 := x.TableReaderCommit
		ret.TableReaderCommit = func(t TableReaderCommitStartInfo) func(TableReaderCommitDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TableReaderCommitDoneInfo)
			if h1 != nil {
				r = h1(t)
			}
			if h2 != nil {
				r1 = h2(t)
			}
			return func(t TableReaderCommitDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(t)
				}
				if r1 != nil {
					r1(t)
				}
			}
		}
	}
	{
		h1 := t.TableReaderStreamSentCommitMessage
		h2 := x.TableReaderStreamSentCommitMessage
		ret.TableReaderStreamSentCommitMessage = func(t TableReaderStreamSentCommitMessageStartInfo) func(TableReaderStreamSentCommitMessageDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TableReaderStreamSentCommitMessageDoneInfo)
			if h1 != nil {
				r = h1(t)
			}
			if h2 != nil {
				r1 = h2(t)
			}
			return func(t TableReaderStreamSentCommitMessageDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(t)
				}
				if r1 != nil {
					r1(t)
				}
			}
		}
	}
	{
		h1 := t.TableReaderStreamCommittedNotify
		h2 := x.TableReaderStreamCommittedNotify
		ret.TableReaderStreamCommittedNotify = func(t TableReaderStreamCommittedInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(t)
			}
			if h2 != nil {
				h2(t)
			}
		}
	}
	{
		h1 := t.TableReaderStreamPartitionReadStart
		h2 := x.TableReaderStreamPartitionReadStart
		ret.TableReaderStreamPartitionReadStart = func(t TableReaderStreamPartitionReadStartInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(t)
			}
			if h2 != nil {
				h2(t)
			}
		}
	}
	{
		h1 := t.TableReaderStreamPartitionReadStop
		h2 := x.TableReaderStreamPartitionReadStop
		ret.TableReaderStreamPartitionReadStop = func(t TableReaderStreamPartitionReadStopInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(t)
			}
			if h2 != nil {
				h2(t)
			}
		}
	}
	{
		h1 := t.TableReaderStreamClose
		h2 := x.TableReaderStreamClose
		ret.TableReaderStreamClose = func(t TableReaderStreamCloseStartInfo) func(TableReaderStreamCloseDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TableReaderStreamCloseDoneInfo)
			if h1 != nil {
				r = h1(t)
			}
			if h2 != nil {
				r1 = h2(t)
			}
			return func(t TableReaderStreamCloseDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(t)
				}
				if r1 != nil {
					r1(t)
				}
			}
		}
	}
	{
		h1 := t.TableReaderStreamInit
		h2 := x.TableReaderStreamInit
		ret.TableReaderStreamInit = func(t TableReaderStreamInitStartInfo) func(TableReaderStreamInitDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TableReaderStreamInitDoneInfo)
			if h1 != nil {
				r = h1(t)
			}
			if h2 != nil {
				r1 = h2(t)
			}
			return func(t TableReaderStreamInitDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(t)
				}
				if r1 != nil {
					r1(t)
				}
			}
		}
	}
	{
		h1 := t.TableReaderStreamError
		h2 := x.TableReaderStreamError
		ret.TableReaderStreamError = func(t TableReaderStreamErrorInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(t)
			}
			if h2 != nil {
				h2(t)
			}
		}
	}
	{
		h1 := t.TableReaderStreamSentDataRequest
		h2 := x.TableReaderStreamSentDataRequest
		ret.TableReaderStreamSentDataRequest = func(t TableReaderStreamSentDataRequestInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(t)
			}
			if h2 != nil {
				h2(t)
			}
		}
	}
	{
		h1 := t.TableReaderStreamReceiveDataResponse
		h2 := x.TableReaderStreamReceiveDataResponse
		ret.TableReaderStreamReceiveDataResponse = func(t TableReaderStreamReceiveDataResponseStartInfo) func(TableReaderStreamReceiveDataResponseDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TableReaderStreamReceiveDataResponseDoneInfo)
			if h1 != nil {
				r = h1(t)
			}
			if h2 != nil {
				r1 = h2(t)
			}
			return func(t TableReaderStreamReceiveDataResponseDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(t)
				}
				if r1 != nil {
					r1(t)
				}
			}
		}
	}
	{
		h1 := t.TableReaderStreamReadMessages
		h2 := x.TableReaderStreamReadMessages
		ret.TableReaderStreamReadMessages = func(t TableReaderStreamReadMessagesStartInfo) func(TableReaderStreamReadMessagesDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TableReaderStreamReadMessagesDoneInfo)
			if h1 != nil {
				r = h1(t)
			}
			if h2 != nil {
				r1 = h2(t)
			}
			return func(t TableReaderStreamReadMessagesDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(t)
				}
				if r1 != nil {
					r1(t)
				}
			}
		}
	}
	{
		h1 := t.TableReaderStreamUnknownGrpcMessage
		h2 := x.TableReaderStreamUnknownGrpcMessage
		ret.TableReaderStreamUnknownGrpcMessage = func(o OnReadStreamUnknownGrpcMessageInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(o)
			}
			if h2 != nil {
				h2(o)
			}
		}
	}
	{
		h1 := t.TableReaderStreamUpdateToken
		h2 := x.TableReaderStreamUpdateToken
		ret.TableReaderStreamUpdateToken = func(o OnReadStreamUpdateTokenStartInfo) func(OnReadStreamUpdateTokenMiddleTokenReceivedInfo) func(OnReadStreamUpdateTokenDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(OnReadStreamUpdateTokenMiddleTokenReceivedInfo) func(OnReadStreamUpdateTokenDoneInfo)
			if h1 != nil {
				r = h1(o)
			}
			if h2 != nil {
				r1 = h2(o)
			}
			return func(o OnReadStreamUpdateTokenMiddleTokenReceivedInfo) func(OnReadStreamUpdateTokenDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				var r2, r3 func(OnReadStreamUpdateTokenDoneInfo)
				if r != nil {
					r2 = r(o)
				}
				if r1 != nil {
					r3 = r1(o)
				}
				return func(o OnReadStreamUpdateTokenDoneInfo) {
					if options.panicCallback != nil {
						defer func() {
							if e := recover(); e != nil {
								options.panicCallback(e)
							}
						}()
					}
					if r2 != nil {
						r2(o)
					}
					if r3 != nil {
						r3(o)
					}
				}
			}
		}
	}
	return ret
}
func (t Topic) tableReaderConnect(t1 TableReaderConnectStartInfo) func(TableReaderConnectDoneInfo) {
	fn := t.TableReaderConnect
	if fn == nil {
		return func(TableReaderConnectDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TableReaderConnectDoneInfo) {
			return
		}
	}
	return res
}
func (t Topic) tableReaderReconnect(t1 TableReaderReconnectStartInfo) func(TableReaderReconnectDoneInfo) {
	fn := t.TableReaderReconnect
	if fn == nil {
		return func(TableReaderReconnectDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TableReaderReconnectDoneInfo) {
			return
		}
	}
	return res
}
func (t Topic) tableReaderReconnectRequest(t1 TableReaderReconnectRequestInfo) {
	fn := t.TableReaderReconnectRequest
	if fn == nil {
		return
	}
	fn(t1)
}
func (t Topic) tableReaderReadMessages(t1 TableReaderReadMessagesStartInfo) func(TableReaderReadMessagesDoneInfo) {
	fn := t.TableReaderReadMessages
	if fn == nil {
		return func(TableReaderReadMessagesDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TableReaderReadMessagesDoneInfo) {
			return
		}
	}
	return res
}
func (t Topic) tableReaderCommit(t1 TableReaderCommitStartInfo) func(TableReaderCommitDoneInfo) {
	fn := t.TableReaderCommit
	if fn == nil {
		return func(TableReaderCommitDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TableReaderCommitDoneInfo) {
			return
		}
	}
	return res
}
func (t Topic) tableReaderStreamSentCommitMessage(t1 TableReaderStreamSentCommitMessageStartInfo) func(TableReaderStreamSentCommitMessageDoneInfo) {
	fn := t.TableReaderStreamSentCommitMessage
	if fn == nil {
		return func(TableReaderStreamSentCommitMessageDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TableReaderStreamSentCommitMessageDoneInfo) {
			return
		}
	}
	return res
}
func (t Topic) tableReaderStreamCommittedNotify(t1 TableReaderStreamCommittedInfo) {
	fn := t.TableReaderStreamCommittedNotify
	if fn == nil {
		return
	}
	fn(t1)
}
func (t Topic) tableReaderStreamPartitionReadStart(t1 TableReaderStreamPartitionReadStartInfo) {
	fn := t.TableReaderStreamPartitionReadStart
	if fn == nil {
		return
	}
	fn(t1)
}
func (t Topic) tableReaderStreamPartitionReadStop(t1 TableReaderStreamPartitionReadStopInfo) {
	fn := t.TableReaderStreamPartitionReadStop
	if fn == nil {
		return
	}
	fn(t1)
}
func (t Topic) tableReaderStreamClose(t1 TableReaderStreamCloseStartInfo) func(TableReaderStreamCloseDoneInfo) {
	fn := t.TableReaderStreamClose
	if fn == nil {
		return func(TableReaderStreamCloseDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TableReaderStreamCloseDoneInfo) {
			return
		}
	}
	return res
}
func (t Topic) tableReaderStreamInit(t1 TableReaderStreamInitStartInfo) func(TableReaderStreamInitDoneInfo) {
	fn := t.TableReaderStreamInit
	if fn == nil {
		return func(TableReaderStreamInitDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TableReaderStreamInitDoneInfo) {
			return
		}
	}
	return res
}
func (t Topic) tableReaderStreamError(t1 TableReaderStreamErrorInfo) {
	fn := t.TableReaderStreamError
	if fn == nil {
		return
	}
	fn(t1)
}
func (t Topic) tableReaderStreamSentDataRequest(t1 TableReaderStreamSentDataRequestInfo) {
	fn := t.TableReaderStreamSentDataRequest
	if fn == nil {
		return
	}
	fn(t1)
}
func (t Topic) tableReaderStreamReceiveDataResponse(t1 TableReaderStreamReceiveDataResponseStartInfo) func(TableReaderStreamReceiveDataResponseDoneInfo) {
	fn := t.TableReaderStreamReceiveDataResponse
	if fn == nil {
		return func(TableReaderStreamReceiveDataResponseDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TableReaderStreamReceiveDataResponseDoneInfo) {
			return
		}
	}
	return res
}
func (t Topic) tableReaderStreamReadMessages(t1 TableReaderStreamReadMessagesStartInfo) func(TableReaderStreamReadMessagesDoneInfo) {
	fn := t.TableReaderStreamReadMessages
	if fn == nil {
		return func(TableReaderStreamReadMessagesDoneInfo) {
			return
		}
	}
	res := fn(t1)
	if res == nil {
		return func(TableReaderStreamReadMessagesDoneInfo) {
			return
		}
	}
	return res
}
func (t Topic) tableReaderStreamUnknownGrpcMessage(o OnReadStreamUnknownGrpcMessageInfo) {
	fn := t.TableReaderStreamUnknownGrpcMessage
	if fn == nil {
		return
	}
	fn(o)
}
func (t Topic) tableReaderStreamUpdateToken(o OnReadStreamUpdateTokenStartInfo) func(OnReadStreamUpdateTokenMiddleTokenReceivedInfo) func(OnReadStreamUpdateTokenDoneInfo) {
	fn := t.TableReaderStreamUpdateToken
	if fn == nil {
		return func(OnReadStreamUpdateTokenMiddleTokenReceivedInfo) func(OnReadStreamUpdateTokenDoneInfo) {
			return func(OnReadStreamUpdateTokenDoneInfo) {
				return
			}
		}
	}
	res := fn(o)
	if res == nil {
		return func(OnReadStreamUpdateTokenMiddleTokenReceivedInfo) func(OnReadStreamUpdateTokenDoneInfo) {
			return func(OnReadStreamUpdateTokenDoneInfo) {
				return
			}
		}
	}
	return func(o OnReadStreamUpdateTokenMiddleTokenReceivedInfo) func(OnReadStreamUpdateTokenDoneInfo) {
		res := res(o)
		if res == nil {
			return func(OnReadStreamUpdateTokenDoneInfo) {
				return
			}
		}
		return res
	}
}
func TopicTableReaderConnect(t Topic) func(error) {
	var p TableReaderConnectStartInfo
	res := t.tableReaderConnect(p)
	return func(e error) {
		var p TableReaderConnectDoneInfo
		p.Error = e
		res(p)
	}
}
func TopicTableReaderReconnect(t Topic) func(error) {
	var p TableReaderReconnectStartInfo
	res := t.tableReaderReconnect(p)
	return func(e error) {
		var p TableReaderReconnectDoneInfo
		p.Error = e
		res(p)
	}
}
func TopicTableReaderReconnectRequest(t Topic, reason error, wasSent bool) {
	var p TableReaderReconnectRequestInfo
	p.Reason = reason
	p.WasSent = wasSent
	t.tableReaderReconnectRequest(p)
}
func TopicTableReaderReadMessages(t Topic, requestContext context.Context, minCount int, maxCount int) func(messagesCount int, topic string, partitionID int64, offsetStart int64, offsetEnd int64, _ error) {
	var p TableReaderReadMessagesStartInfo
	p.RequestContext = requestContext
	p.MinCount = minCount
	p.MaxCount = maxCount
	res := t.tableReaderReadMessages(p)
	return func(messagesCount int, topic string, partitionID int64, offsetStart int64, offsetEnd int64, e error) {
		var p TableReaderReadMessagesDoneInfo
		p.MessagesCount = messagesCount
		p.Topic = topic
		p.PartitionID = partitionID
		p.OffsetStart = offsetStart
		p.OffsetEnd = offsetEnd
		p.Error = e
		res(p)
	}
}
func TopicTableReaderCommit(t Topic, requestContext context.Context, topic string, partitionID int64, partitionSessionID int64, startOffset int64, endOffset int64) func(error) {
	var p TableReaderCommitStartInfo
	p.RequestContext = requestContext
	p.Topic = topic
	p.PartitionID = partitionID
	p.PartitionSessionID = partitionSessionID
	p.StartOffset = startOffset
	p.EndOffset = endOffset
	res := t.tableReaderCommit(p)
	return func(e error) {
		var p TableReaderCommitDoneInfo
		p.Error = e
		res(p)
	}
}
func TopicTableReaderStreamSentCommitMessage(t Topic) func(error) {
	var p TableReaderStreamSentCommitMessageStartInfo
	res := t.tableReaderStreamSentCommitMessage(p)
	return func(e error) {
		var p TableReaderStreamSentCommitMessageDoneInfo
		p.Error = e
		res(p)
	}
}
func TopicTableReaderStreamCommittedNotify(t Topic, readerConnectionID string, topic string, partitionID int64, committedOffset int64) {
	var p TableReaderStreamCommittedInfo
	p.ReaderConnectionID = readerConnectionID
	p.Topic = topic
	p.PartitionID = partitionID
	p.CommittedOffset = committedOffset
	t.tableReaderStreamCommittedNotify(p)
}
func TopicTableReaderStreamPartitionReadStart(t Topic, readerConnectionID string, partitionContext context.Context, topic string, partitionID int64, readOffset *int64, commitOffset *int64) {
	var p TableReaderStreamPartitionReadStartInfo
	p.ReaderConnectionID = readerConnectionID
	p.PartitionContext = partitionContext
	p.Topic = topic
	p.PartitionID = partitionID
	p.ReadOffset = readOffset
	p.CommitOffset = commitOffset
	t.tableReaderStreamPartitionReadStart(p)
}
func TopicTableReaderStreamPartitionReadStop(t Topic, readerConnectionID string, partitionContext context.Context, topic string, partitionID int64, partitionSessionID int64, committedOffset int64, graceful bool) {
	var p TableReaderStreamPartitionReadStopInfo
	p.ReaderConnectionID = readerConnectionID
	p.PartitionContext = partitionContext
	p.Topic = topic
	p.PartitionID = partitionID
	p.PartitionSessionID = partitionSessionID
	p.CommittedOffset = committedOffset
	p.Graceful = graceful
	t.tableReaderStreamPartitionReadStop(p)
}
func TopicTableReaderStreamClose(t Topic, readerConnectionID string, closeReason error) func(closeError error) {
	var p TableReaderStreamCloseStartInfo
	p.ReaderConnectionID = readerConnectionID
	p.CloseReason = closeReason
	res := t.tableReaderStreamClose(p)
	return func(closeError error) {
		var p TableReaderStreamCloseDoneInfo
		p.CloseError = closeError
		res(p)
	}
}
func TopicTableReaderStreamInit(t Topic, preInitReaderConnectionID string, initRequestInfo TopicReadStreamInitRequestInfo) func(newReaderConnectionID string, _ error) {
	var p TableReaderStreamInitStartInfo
	p.PreInitReaderConnectionID = preInitReaderConnectionID
	p.InitRequestInfo = initRequestInfo
	res := t.tableReaderStreamInit(p)
	return func(newReaderConnectionID string, e error) {
		var p TableReaderStreamInitDoneInfo
		p.NewReaderConnectionID = newReaderConnectionID
		p.Error = e
		res(p)
	}
}
func TopicTableReaderStreamError(t Topic, readerConnectionID string, e error) {
	var p TableReaderStreamErrorInfo
	p.ReaderConnectionID = readerConnectionID
	p.Error = e
	t.tableReaderStreamError(p)
}
func TopicTableReaderStreamSentDataRequest(t Topic, readerConnectionID string, requestBytes int, localBufferSizeAfterSent int) {
	var p TableReaderStreamSentDataRequestInfo
	p.ReaderConnectionID = readerConnectionID
	p.RequestBytes = requestBytes
	p.LocalBufferSizeAfterSent = localBufferSizeAfterSent
	t.tableReaderStreamSentDataRequest(p)
}
func TopicTableReaderStreamReceiveDataResponse(t Topic, readerConnectionID string, localBufferSizeAfterReceive int, dataResponse TopicReaderDataResponseInfo) func(error) {
	var p TableReaderStreamReceiveDataResponseStartInfo
	p.ReaderConnectionID = readerConnectionID
	p.LocalBufferSizeAfterReceive = localBufferSizeAfterReceive
	p.DataResponse = dataResponse
	res := t.tableReaderStreamReceiveDataResponse(p)
	return func(e error) {
		var p TableReaderStreamReceiveDataResponseDoneInfo
		p.Error = e
		res(p)
	}
}
func TopicTableReaderStreamReadMessages(t Topic, requestContext context.Context, minCount int, maxCount int, freeBufferCapacity int) func(messagesCount int, topic string, partitionID int64, offsetStart int64, offsetEnd int64, freeBufferCapacity int, _ error) {
	var p TableReaderStreamReadMessagesStartInfo
	p.RequestContext = requestContext
	p.MinCount = minCount
	p.MaxCount = maxCount
	p.FreeBufferCapacity = freeBufferCapacity
	res := t.tableReaderStreamReadMessages(p)
	return func(messagesCount int, topic string, partitionID int64, offsetStart int64, offsetEnd int64, freeBufferCapacity int, e error) {
		var p TableReaderStreamReadMessagesDoneInfo
		p.MessagesCount = messagesCount
		p.Topic = topic
		p.PartitionID = partitionID
		p.OffsetStart = offsetStart
		p.OffsetEnd = offsetEnd
		p.FreeBufferCapacity = freeBufferCapacity
		p.Error = e
		res(p)
	}
}
func TopicTableReaderStreamUnknownGrpcMessage(t Topic, readerConnectionID string, e error) {
	var p OnReadStreamUnknownGrpcMessageInfo
	p.ReaderConnectionID = readerConnectionID
	p.Error = e
	t.tableReaderStreamUnknownGrpcMessage(p)
}
func TopicTableReaderStreamUpdateToken(t Topic, readerConnectionID string) func(tokenLen int, _ error) func(error) {
	var p OnReadStreamUpdateTokenStartInfo
	p.ReaderConnectionID = readerConnectionID
	res := t.tableReaderStreamUpdateToken(p)
	return func(tokenLen int, e error) func(error) {
		var p OnReadStreamUpdateTokenMiddleTokenReceivedInfo
		p.TokenLen = tokenLen
		p.Error = e
		res := res(p)
		return func(e error) {
			var p OnReadStreamUpdateTokenDoneInfo
			p.Error = e
			res(p)
		}
	}
}
