// Code generated by gtrace. DO NOT EDIT.

package trace

import (
	"context"
)

// topicComposeOptions is a holder of options
type topicComposeOptions struct {
	panicCallback func(e interface{})
}

// TopicOption specified Topic compose option
type TopicComposeOption func(o *topicComposeOptions)

// WithTopicPanicCallback specified behavior on panic
func WithTopicPanicCallback(cb func(e interface{})) TopicComposeOption {
	return func(o *topicComposeOptions) {
		o.panicCallback = cb
	}
}

// Compose returns a new Topic which has functional fields composed both from t and x.
func (t Topic) Compose(x Topic, opts ...TopicComposeOption) (ret Topic) {
	options := topicComposeOptions{}
	for _, opt := range opts {
		opt(&options)
	}
	{
		h1 := t.OnReaderReconnect
		h2 := x.OnReaderReconnect
		ret.OnReaderReconnect = func(startInfo TopicReaderReconnectStartInfo) func(TopicReaderReconnectDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TopicReaderReconnectDoneInfo)
			if h1 != nil {
				r = h1(startInfo)
			}
			if h2 != nil {
				r1 = h2(startInfo)
			}
			return func(doneInfo TopicReaderReconnectDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(doneInfo)
				}
				if r1 != nil {
					r1(doneInfo)
				}
			}
		}
	}
	{
		h1 := t.OnReaderReconnectRequest
		h2 := x.OnReaderReconnectRequest
		ret.OnReaderReconnectRequest = func(info TopicReaderReconnectRequestInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(info)
			}
			if h2 != nil {
				h2(info)
			}
		}
	}
	{
		h1 := t.OnReaderPartitionReadStartResponse
		h2 := x.OnReaderPartitionReadStartResponse
		ret.OnReaderPartitionReadStartResponse = func(startInfo TopicReaderPartitionReadStartResponseStartInfo) func(TopicReaderPartitionReadStartResponseDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TopicReaderPartitionReadStartResponseDoneInfo)
			if h1 != nil {
				r = h1(startInfo)
			}
			if h2 != nil {
				r1 = h2(startInfo)
			}
			return func(doneInfo TopicReaderPartitionReadStartResponseDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(doneInfo)
				}
				if r1 != nil {
					r1(doneInfo)
				}
			}
		}
	}
	{
		h1 := t.OnReaderPartitionReadStopResponse
		h2 := x.OnReaderPartitionReadStopResponse
		ret.OnReaderPartitionReadStopResponse = func(startInfo TopicReaderPartitionReadStopResponseStartInfo) func(TopicReaderPartitionReadStopResponseDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TopicReaderPartitionReadStopResponseDoneInfo)
			if h1 != nil {
				r = h1(startInfo)
			}
			if h2 != nil {
				r1 = h2(startInfo)
			}
			return func(doneInfo TopicReaderPartitionReadStopResponseDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(doneInfo)
				}
				if r1 != nil {
					r1(doneInfo)
				}
			}
		}
	}
	{
		h1 := t.OnReaderStreamCommit
		h2 := x.OnReaderStreamCommit
		ret.OnReaderStreamCommit = func(startInfo TopicReaderStreamCommitStartInfo) func(TopicReaderStreamCommitDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TopicReaderStreamCommitDoneInfo)
			if h1 != nil {
				r = h1(startInfo)
			}
			if h2 != nil {
				r1 = h2(startInfo)
			}
			return func(doneInfo TopicReaderStreamCommitDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(doneInfo)
				}
				if r1 != nil {
					r1(doneInfo)
				}
			}
		}
	}
	{
		h1 := t.OnReaderStreamSendCommitMessage
		h2 := x.OnReaderStreamSendCommitMessage
		ret.OnReaderStreamSendCommitMessage = func(startInfo TopicReaderStreamSendCommitMessageStartInfo) func(TopicReaderStreamSendCommitMessageDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TopicReaderStreamSendCommitMessageDoneInfo)
			if h1 != nil {
				r = h1(startInfo)
			}
			if h2 != nil {
				r1 = h2(startInfo)
			}
			return func(doneInfo TopicReaderStreamSendCommitMessageDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(doneInfo)
				}
				if r1 != nil {
					r1(doneInfo)
				}
			}
		}
	}
	{
		h1 := t.OnReaderStreamCommittedNotify
		h2 := x.OnReaderStreamCommittedNotify
		ret.OnReaderStreamCommittedNotify = func(info TopicReaderStreamCommittedNotifyInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(info)
			}
			if h2 != nil {
				h2(info)
			}
		}
	}
	{
		h1 := t.OnReaderStreamClose
		h2 := x.OnReaderStreamClose
		ret.OnReaderStreamClose = func(startInfo TopicReaderStreamCloseStartInfo) func(TopicReaderStreamCloseDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TopicReaderStreamCloseDoneInfo)
			if h1 != nil {
				r = h1(startInfo)
			}
			if h2 != nil {
				r1 = h2(startInfo)
			}
			return func(doneInfo TopicReaderStreamCloseDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(doneInfo)
				}
				if r1 != nil {
					r1(doneInfo)
				}
			}
		}
	}
	{
		h1 := t.OnReaderStreamInit
		h2 := x.OnReaderStreamInit
		ret.OnReaderStreamInit = func(startInfo TopicReaderStreamInitStartInfo) func(TopicReaderStreamInitDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TopicReaderStreamInitDoneInfo)
			if h1 != nil {
				r = h1(startInfo)
			}
			if h2 != nil {
				r1 = h2(startInfo)
			}
			return func(doneInfo TopicReaderStreamInitDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(doneInfo)
				}
				if r1 != nil {
					r1(doneInfo)
				}
			}
		}
	}
	{
		h1 := t.OnReaderStreamError
		h2 := x.OnReaderStreamError
		ret.OnReaderStreamError = func(info TopicReaderStreamErrorInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(info)
			}
			if h2 != nil {
				h2(info)
			}
		}
	}
	{
		h1 := t.OnReaderStreamUpdateToken
		h2 := x.OnReaderStreamUpdateToken
		ret.OnReaderStreamUpdateToken = func(startInfo OnReadStreamUpdateTokenStartInfo) func(OnReadStreamUpdateTokenMiddleTokenReceivedInfo) func(OnReadStreamUpdateTokenDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(OnReadStreamUpdateTokenMiddleTokenReceivedInfo) func(OnReadStreamUpdateTokenDoneInfo)
			if h1 != nil {
				r = h1(startInfo)
			}
			if h2 != nil {
				r1 = h2(startInfo)
			}
			return func(updateTokenInfo OnReadStreamUpdateTokenMiddleTokenReceivedInfo) func(OnReadStreamUpdateTokenDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				var r2, r3 func(OnReadStreamUpdateTokenDoneInfo)
				if r != nil {
					r2 = r(updateTokenInfo)
				}
				if r1 != nil {
					r3 = r1(updateTokenInfo)
				}
				return func(doneInfo OnReadStreamUpdateTokenDoneInfo) {
					if options.panicCallback != nil {
						defer func() {
							if e := recover(); e != nil {
								options.panicCallback(e)
							}
						}()
					}
					if r2 != nil {
						r2(doneInfo)
					}
					if r3 != nil {
						r3(doneInfo)
					}
				}
			}
		}
	}
	{
		h1 := t.OnReaderStreamSentDataRequest
		h2 := x.OnReaderStreamSentDataRequest
		ret.OnReaderStreamSentDataRequest = func(startInfo TopicReaderStreamSentDataRequestInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(startInfo)
			}
			if h2 != nil {
				h2(startInfo)
			}
		}
	}
	{
		h1 := t.OnReaderStreamReceiveDataResponse
		h2 := x.OnReaderStreamReceiveDataResponse
		ret.OnReaderStreamReceiveDataResponse = func(startInfo TopicReaderStreamReceiveDataResponseStartInfo) func(TopicReaderStreamReceiveDataResponseDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TopicReaderStreamReceiveDataResponseDoneInfo)
			if h1 != nil {
				r = h1(startInfo)
			}
			if h2 != nil {
				r1 = h2(startInfo)
			}
			return func(doneInfo TopicReaderStreamReceiveDataResponseDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(doneInfo)
				}
				if r1 != nil {
					r1(doneInfo)
				}
			}
		}
	}
	{
		h1 := t.OnReaderStreamReadMessages
		h2 := x.OnReaderStreamReadMessages
		ret.OnReaderStreamReadMessages = func(startInfo TopicReaderStreamReadMessagesStartInfo) func(TopicReaderStreamReadMessagesDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(TopicReaderStreamReadMessagesDoneInfo)
			if h1 != nil {
				r = h1(startInfo)
			}
			if h2 != nil {
				r1 = h2(startInfo)
			}
			return func(doneInfo TopicReaderStreamReadMessagesDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(doneInfo)
				}
				if r1 != nil {
					r1(doneInfo)
				}
			}
		}
	}
	{
		h1 := t.OnReaderStreamUnknownGrpcMessage
		h2 := x.OnReaderStreamUnknownGrpcMessage
		ret.OnReaderStreamUnknownGrpcMessage = func(info OnReadStreamUnknownGrpcMessageInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			if h1 != nil {
				h1(info)
			}
			if h2 != nil {
				h2(info)
			}
		}
	}
	return ret
}
func (t Topic) onReaderReconnect(startInfo TopicReaderReconnectStartInfo) func(doneInfo TopicReaderReconnectDoneInfo) {
	fn := t.OnReaderReconnect
	if fn == nil {
		return func(TopicReaderReconnectDoneInfo) {
			return
		}
	}
	res := fn(startInfo)
	if res == nil {
		return func(TopicReaderReconnectDoneInfo) {
			return
		}
	}
	return res
}
func (t Topic) onReaderReconnectRequest(info TopicReaderReconnectRequestInfo) {
	fn := t.OnReaderReconnectRequest
	if fn == nil {
		return
	}
	fn(info)
}
func (t Topic) onReaderPartitionReadStartResponse(startInfo TopicReaderPartitionReadStartResponseStartInfo) func(doneInfo TopicReaderPartitionReadStartResponseDoneInfo) {
	fn := t.OnReaderPartitionReadStartResponse
	if fn == nil {
		return func(TopicReaderPartitionReadStartResponseDoneInfo) {
			return
		}
	}
	res := fn(startInfo)
	if res == nil {
		return func(TopicReaderPartitionReadStartResponseDoneInfo) {
			return
		}
	}
	return res
}
func (t Topic) onReaderPartitionReadStopResponse(startInfo TopicReaderPartitionReadStopResponseStartInfo) func(doneInfo TopicReaderPartitionReadStopResponseDoneInfo) {
	fn := t.OnReaderPartitionReadStopResponse
	if fn == nil {
		return func(TopicReaderPartitionReadStopResponseDoneInfo) {
			return
		}
	}
	res := fn(startInfo)
	if res == nil {
		return func(TopicReaderPartitionReadStopResponseDoneInfo) {
			return
		}
	}
	return res
}
func (t Topic) onReaderStreamCommit(startInfo TopicReaderStreamCommitStartInfo) func(doneInfo TopicReaderStreamCommitDoneInfo) {
	fn := t.OnReaderStreamCommit
	if fn == nil {
		return func(TopicReaderStreamCommitDoneInfo) {
			return
		}
	}
	res := fn(startInfo)
	if res == nil {
		return func(TopicReaderStreamCommitDoneInfo) {
			return
		}
	}
	return res
}
func (t Topic) onReaderStreamSendCommitMessage(startInfo TopicReaderStreamSendCommitMessageStartInfo) func(doneInfo TopicReaderStreamSendCommitMessageDoneInfo) {
	fn := t.OnReaderStreamSendCommitMessage
	if fn == nil {
		return func(TopicReaderStreamSendCommitMessageDoneInfo) {
			return
		}
	}
	res := fn(startInfo)
	if res == nil {
		return func(TopicReaderStreamSendCommitMessageDoneInfo) {
			return
		}
	}
	return res
}
func (t Topic) onReaderStreamCommittedNotify(info TopicReaderStreamCommittedNotifyInfo) {
	fn := t.OnReaderStreamCommittedNotify
	if fn == nil {
		return
	}
	fn(info)
}
func (t Topic) onReaderStreamClose(startInfo TopicReaderStreamCloseStartInfo) func(doneInfo TopicReaderStreamCloseDoneInfo) {
	fn := t.OnReaderStreamClose
	if fn == nil {
		return func(TopicReaderStreamCloseDoneInfo) {
			return
		}
	}
	res := fn(startInfo)
	if res == nil {
		return func(TopicReaderStreamCloseDoneInfo) {
			return
		}
	}
	return res
}
func (t Topic) onReaderStreamInit(startInfo TopicReaderStreamInitStartInfo) func(doneInfo TopicReaderStreamInitDoneInfo) {
	fn := t.OnReaderStreamInit
	if fn == nil {
		return func(TopicReaderStreamInitDoneInfo) {
			return
		}
	}
	res := fn(startInfo)
	if res == nil {
		return func(TopicReaderStreamInitDoneInfo) {
			return
		}
	}
	return res
}
func (t Topic) onReaderStreamError(info TopicReaderStreamErrorInfo) {
	fn := t.OnReaderStreamError
	if fn == nil {
		return
	}
	fn(info)
}
func (t Topic) onReaderStreamUpdateToken(startInfo OnReadStreamUpdateTokenStartInfo) func(updateTokenInfo OnReadStreamUpdateTokenMiddleTokenReceivedInfo) func(doneInfo OnReadStreamUpdateTokenDoneInfo) {
	fn := t.OnReaderStreamUpdateToken
	if fn == nil {
		return func(OnReadStreamUpdateTokenMiddleTokenReceivedInfo) func(OnReadStreamUpdateTokenDoneInfo) {
			return func(OnReadStreamUpdateTokenDoneInfo) {
				return
			}
		}
	}
	res := fn(startInfo)
	if res == nil {
		return func(OnReadStreamUpdateTokenMiddleTokenReceivedInfo) func(OnReadStreamUpdateTokenDoneInfo) {
			return func(OnReadStreamUpdateTokenDoneInfo) {
				return
			}
		}
	}
	return func(updateTokenInfo OnReadStreamUpdateTokenMiddleTokenReceivedInfo) func(OnReadStreamUpdateTokenDoneInfo) {
		res := res(updateTokenInfo)
		if res == nil {
			return func(OnReadStreamUpdateTokenDoneInfo) {
				return
			}
		}
		return res
	}
}
func (t Topic) onReaderStreamSentDataRequest(startInfo TopicReaderStreamSentDataRequestInfo) {
	fn := t.OnReaderStreamSentDataRequest
	if fn == nil {
		return
	}
	fn(startInfo)
}
func (t Topic) onReaderStreamReceiveDataResponse(startInfo TopicReaderStreamReceiveDataResponseStartInfo) func(doneInfo TopicReaderStreamReceiveDataResponseDoneInfo) {
	fn := t.OnReaderStreamReceiveDataResponse
	if fn == nil {
		return func(TopicReaderStreamReceiveDataResponseDoneInfo) {
			return
		}
	}
	res := fn(startInfo)
	if res == nil {
		return func(TopicReaderStreamReceiveDataResponseDoneInfo) {
			return
		}
	}
	return res
}
func (t Topic) onReaderStreamReadMessages(startInfo TopicReaderStreamReadMessagesStartInfo) func(doneInfo TopicReaderStreamReadMessagesDoneInfo) {
	fn := t.OnReaderStreamReadMessages
	if fn == nil {
		return func(TopicReaderStreamReadMessagesDoneInfo) {
			return
		}
	}
	res := fn(startInfo)
	if res == nil {
		return func(TopicReaderStreamReadMessagesDoneInfo) {
			return
		}
	}
	return res
}
func (t Topic) onReaderStreamUnknownGrpcMessage(info OnReadStreamUnknownGrpcMessageInfo) {
	fn := t.OnReaderStreamUnknownGrpcMessage
	if fn == nil {
		return
	}
	fn(info)
}
func TopicOnReaderReconnect(t Topic) func(error) {
	var p TopicReaderReconnectStartInfo
	res := t.onReaderReconnect(p)
	return func(e error) {
		var p TopicReaderReconnectDoneInfo
		p.Error = e
		res(p)
	}
}
func TopicOnReaderReconnectRequest(t Topic, reason error, wasSent bool) {
	var p TopicReaderReconnectRequestInfo
	p.Reason = reason
	p.WasSent = wasSent
	t.onReaderReconnectRequest(p)
}
func TopicOnReaderPartitionReadStartResponse(t Topic, readerConnectionID string, partitionContext context.Context, topic string, partitionID int64, partitionSessionID int64) func(readOffset *int64, commitOffset *int64, _ error) {
	var p TopicReaderPartitionReadStartResponseStartInfo
	p.ReaderConnectionID = readerConnectionID
	p.PartitionContext = partitionContext
	p.Topic = topic
	p.PartitionID = partitionID
	p.PartitionSessionID = partitionSessionID
	res := t.onReaderPartitionReadStartResponse(p)
	return func(readOffset *int64, commitOffset *int64, e error) {
		var p TopicReaderPartitionReadStartResponseDoneInfo
		p.ReadOffset = readOffset
		p.CommitOffset = commitOffset
		p.Error = e
		res(p)
	}
}
func TopicOnReaderPartitionReadStopResponse(t Topic, readerConnectionID string, partitionContext context.Context, topic string, partitionID int64, partitionSessionID int64, committedOffset int64, graceful bool) func(error) {
	var p TopicReaderPartitionReadStopResponseStartInfo
	p.ReaderConnectionID = readerConnectionID
	p.PartitionContext = partitionContext
	p.Topic = topic
	p.PartitionID = partitionID
	p.PartitionSessionID = partitionSessionID
	p.CommittedOffset = committedOffset
	p.Graceful = graceful
	res := t.onReaderPartitionReadStopResponse(p)
	return func(e error) {
		var p TopicReaderPartitionReadStopResponseDoneInfo
		p.Error = e
		res(p)
	}
}
func TopicOnReaderStreamCommit(t Topic, requestContext context.Context, topic string, partitionID int64, partitionSessionID int64, startOffset int64, endOffset int64) func(error) {
	var p TopicReaderStreamCommitStartInfo
	p.RequestContext = requestContext
	p.Topic = topic
	p.PartitionID = partitionID
	p.PartitionSessionID = partitionSessionID
	p.StartOffset = startOffset
	p.EndOffset = endOffset
	res := t.onReaderStreamCommit(p)
	return func(e error) {
		var p TopicReaderStreamCommitDoneInfo
		p.Error = e
		res(p)
	}
}
func TopicOnReaderStreamSendCommitMessage(t Topic, commitsInfo TopicReaderStreamSendCommitMessageStartMessageInfo) func(error) {
	var p TopicReaderStreamSendCommitMessageStartInfo
	p.CommitsInfo = commitsInfo
	res := t.onReaderStreamSendCommitMessage(p)
	return func(e error) {
		var p TopicReaderStreamSendCommitMessageDoneInfo
		p.Error = e
		res(p)
	}
}
func TopicOnReaderStreamCommittedNotify(t Topic, readerConnectionID string, topic string, partitionID int64, partitionSessionID int64, committedOffset int64) {
	var p TopicReaderStreamCommittedNotifyInfo
	p.ReaderConnectionID = readerConnectionID
	p.Topic = topic
	p.PartitionID = partitionID
	p.PartitionSessionID = partitionSessionID
	p.CommittedOffset = committedOffset
	t.onReaderStreamCommittedNotify(p)
}
func TopicOnReaderStreamClose(t Topic, readerConnectionID string, closeReason error) func(closeError error) {
	var p TopicReaderStreamCloseStartInfo
	p.ReaderConnectionID = readerConnectionID
	p.CloseReason = closeReason
	res := t.onReaderStreamClose(p)
	return func(closeError error) {
		var p TopicReaderStreamCloseDoneInfo
		p.CloseError = closeError
		res(p)
	}
}
func TopicOnReaderStreamInit(t Topic, preInitReaderConnectionID string, initRequestInfo TopicReadStreamInitRequestInfo) func(readerConnectionID string, _ error) {
	var p TopicReaderStreamInitStartInfo
	p.PreInitReaderConnectionID = preInitReaderConnectionID
	p.InitRequestInfo = initRequestInfo
	res := t.onReaderStreamInit(p)
	return func(readerConnectionID string, e error) {
		var p TopicReaderStreamInitDoneInfo
		p.ReaderConnectionID = readerConnectionID
		p.Error = e
		res(p)
	}
}
func TopicOnReaderStreamError(t Topic, readerConnectionID string, e error) {
	var p TopicReaderStreamErrorInfo
	p.ReaderConnectionID = readerConnectionID
	p.Error = e
	t.onReaderStreamError(p)
}
func TopicOnReaderStreamUpdateToken(t Topic, readerConnectionID string) func(tokenLen int, _ error) func(error) {
	var p OnReadStreamUpdateTokenStartInfo
	p.ReaderConnectionID = readerConnectionID
	res := t.onReaderStreamUpdateToken(p)
	return func(tokenLen int, e error) func(error) {
		var p OnReadStreamUpdateTokenMiddleTokenReceivedInfo
		p.TokenLen = tokenLen
		p.Error = e
		res := res(p)
		return func(e error) {
			var p OnReadStreamUpdateTokenDoneInfo
			p.Error = e
			res(p)
		}
	}
}
func TopicOnReaderStreamSentDataRequest(t Topic, readerConnectionID string, requestBytes int, localBufferSizeAfterSent int) {
	var p TopicReaderStreamSentDataRequestInfo
	p.ReaderConnectionID = readerConnectionID
	p.RequestBytes = requestBytes
	p.LocalBufferSizeAfterSent = localBufferSizeAfterSent
	t.onReaderStreamSentDataRequest(p)
}
func TopicOnReaderStreamReceiveDataResponse(t Topic, readerConnectionID string, localBufferSizeAfterReceive int, dataResponse TopicReaderDataResponseInfo) func(error) {
	var p TopicReaderStreamReceiveDataResponseStartInfo
	p.ReaderConnectionID = readerConnectionID
	p.LocalBufferSizeAfterReceive = localBufferSizeAfterReceive
	p.DataResponse = dataResponse
	res := t.onReaderStreamReceiveDataResponse(p)
	return func(e error) {
		var p TopicReaderStreamReceiveDataResponseDoneInfo
		p.Error = e
		res(p)
	}
}
func TopicOnReaderStreamReadMessages(t Topic, requestContext context.Context, minCount int, maxCount int, freeBufferCapacity int) func(messagesCount int, topic string, partitionID int64, partitionSessionID int64, offsetStart int64, offsetEnd int64, freeBufferCapacity int, _ error) {
	var p TopicReaderStreamReadMessagesStartInfo
	p.RequestContext = requestContext
	p.MinCount = minCount
	p.MaxCount = maxCount
	p.FreeBufferCapacity = freeBufferCapacity
	res := t.onReaderStreamReadMessages(p)
	return func(messagesCount int, topic string, partitionID int64, partitionSessionID int64, offsetStart int64, offsetEnd int64, freeBufferCapacity int, e error) {
		var p TopicReaderStreamReadMessagesDoneInfo
		p.MessagesCount = messagesCount
		p.Topic = topic
		p.PartitionID = partitionID
		p.PartitionSessionID = partitionSessionID
		p.OffsetStart = offsetStart
		p.OffsetEnd = offsetEnd
		p.FreeBufferCapacity = freeBufferCapacity
		p.Error = e
		res(p)
	}
}
func TopicOnReaderStreamUnknownGrpcMessage(t Topic, readerConnectionID string, e error) {
	var p OnReadStreamUnknownGrpcMessageInfo
	p.ReaderConnectionID = readerConnectionID
	p.Error = e
	t.onReaderStreamUnknownGrpcMessage(p)
}
