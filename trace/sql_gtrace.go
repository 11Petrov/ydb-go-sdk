// Code generated by gtrace. DO NOT EDIT.

package trace

import (
	"context"
)

// sQLComposeOptions is a holder of options
type sQLComposeOptions struct {
	panicCallback func(e interface{})
}

// SQLOption specified SQL compose option
type SQLComposeOption func(o *sQLComposeOptions)

// WithSQLPanicCallback specified behavior on panic
func WithSQLPanicCallback(cb func(e interface{})) SQLComposeOption {
	return func(o *sQLComposeOptions) {
		o.panicCallback = cb
	}
}

// Compose returns a new SQL which has functional fields composed both from t and x.
func (t SQL) Compose(x SQL, opts ...SQLComposeOption) (ret SQL) {
	options := sQLComposeOptions{}
	for _, opt := range opts {
		opt(&options)
	}
	{
		h1 := t.OnDriverOpen
		h2 := x.OnDriverOpen
		ret.OnDriverOpen = func(s SQLDriverOpenStartInfo) func(SQLDriverOpenDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(SQLDriverOpenDoneInfo)
			if h1 != nil {
				r = h1(s)
			}
			if h2 != nil {
				r1 = h2(s)
			}
			return func(s SQLDriverOpenDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(s)
				}
				if r1 != nil {
					r1(s)
				}
			}
		}
	}
	{
		h1 := t.OnConnectorConnect
		h2 := x.OnConnectorConnect
		ret.OnConnectorConnect = func(s SQLConnectorConnectStartInfo) func(SQLConnectorConnectDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(SQLConnectorConnectDoneInfo)
			if h1 != nil {
				r = h1(s)
			}
			if h2 != nil {
				r1 = h2(s)
			}
			return func(s SQLConnectorConnectDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(s)
				}
				if r1 != nil {
					r1(s)
				}
			}
		}
	}
	{
		h1 := t.OnConnPrepare
		h2 := x.OnConnPrepare
		ret.OnConnPrepare = func(s SQLConnPrepareStartInfo) func(SQLConnPrepareDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(SQLConnPrepareDoneInfo)
			if h1 != nil {
				r = h1(s)
			}
			if h2 != nil {
				r1 = h2(s)
			}
			return func(s SQLConnPrepareDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(s)
				}
				if r1 != nil {
					r1(s)
				}
			}
		}
	}
	{
		h1 := t.OnConnClose
		h2 := x.OnConnClose
		ret.OnConnClose = func(s SQLConnCloseStartInfo) func(SQLConnCloseDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(SQLConnCloseDoneInfo)
			if h1 != nil {
				r = h1(s)
			}
			if h2 != nil {
				r1 = h2(s)
			}
			return func(s SQLConnCloseDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(s)
				}
				if r1 != nil {
					r1(s)
				}
			}
		}
	}
	{
		h1 := t.OnConnBeginTx
		h2 := x.OnConnBeginTx
		ret.OnConnBeginTx = func(s SQLConnBeginTxStartInfo) func(SQLConnBeginTxDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(SQLConnBeginTxDoneInfo)
			if h1 != nil {
				r = h1(s)
			}
			if h2 != nil {
				r1 = h2(s)
			}
			return func(s SQLConnBeginTxDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(s)
				}
				if r1 != nil {
					r1(s)
				}
			}
		}
	}
	{
		h1 := t.OnConnQueryContext
		h2 := x.OnConnQueryContext
		ret.OnConnQueryContext = func(s SQLConnQueryContextStartInfo) func(SQLConnQueryContextDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(SQLConnQueryContextDoneInfo)
			if h1 != nil {
				r = h1(s)
			}
			if h2 != nil {
				r1 = h2(s)
			}
			return func(s SQLConnQueryContextDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(s)
				}
				if r1 != nil {
					r1(s)
				}
			}
		}
	}
	{
		h1 := t.OnConnExecContext
		h2 := x.OnConnExecContext
		ret.OnConnExecContext = func(s SQLConnExecContextStartInfo) func(SQLConnExecContextDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(SQLConnExecContextDoneInfo)
			if h1 != nil {
				r = h1(s)
			}
			if h2 != nil {
				r1 = h2(s)
			}
			return func(s SQLConnExecContextDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(s)
				}
				if r1 != nil {
					r1(s)
				}
			}
		}
	}
	{
		h1 := t.OnTxCommit
		h2 := x.OnTxCommit
		ret.OnTxCommit = func(s SQLTxCommitStartInfo) func(SQLTxCommitDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(SQLTxCommitDoneInfo)
			if h1 != nil {
				r = h1(s)
			}
			if h2 != nil {
				r1 = h2(s)
			}
			return func(s SQLTxCommitDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(s)
				}
				if r1 != nil {
					r1(s)
				}
			}
		}
	}
	{
		h1 := t.OnTxRollback
		h2 := x.OnTxRollback
		ret.OnTxRollback = func(s SQLTxRollbackStartInfo) func(SQLTxRollbackDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(SQLTxRollbackDoneInfo)
			if h1 != nil {
				r = h1(s)
			}
			if h2 != nil {
				r1 = h2(s)
			}
			return func(s SQLTxRollbackDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(s)
				}
				if r1 != nil {
					r1(s)
				}
			}
		}
	}
	{
		h1 := t.OnStmtQueryContext
		h2 := x.OnStmtQueryContext
		ret.OnStmtQueryContext = func(s SQLStmtQueryContextStartInfo) func(SQLStmtQueryContextDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(SQLStmtQueryContextDoneInfo)
			if h1 != nil {
				r = h1(s)
			}
			if h2 != nil {
				r1 = h2(s)
			}
			return func(s SQLStmtQueryContextDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(s)
				}
				if r1 != nil {
					r1(s)
				}
			}
		}
	}
	{
		h1 := t.OnStmtExecContext
		h2 := x.OnStmtExecContext
		ret.OnStmtExecContext = func(s SQLStmtExecContextStartInfo) func(SQLStmtExecContextDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(SQLStmtExecContextDoneInfo)
			if h1 != nil {
				r = h1(s)
			}
			if h2 != nil {
				r1 = h2(s)
			}
			return func(s SQLStmtExecContextDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(s)
				}
				if r1 != nil {
					r1(s)
				}
			}
		}
	}
	{
		h1 := t.OnStmtClose
		h2 := x.OnStmtClose
		ret.OnStmtClose = func(s SQLStmtCloseStartInfo) func(SQLStmtCloseDoneInfo) {
			if options.panicCallback != nil {
				defer func() {
					if e := recover(); e != nil {
						options.panicCallback(e)
					}
				}()
			}
			var r, r1 func(SQLStmtCloseDoneInfo)
			if h1 != nil {
				r = h1(s)
			}
			if h2 != nil {
				r1 = h2(s)
			}
			return func(s SQLStmtCloseDoneInfo) {
				if options.panicCallback != nil {
					defer func() {
						if e := recover(); e != nil {
							options.panicCallback(e)
						}
					}()
				}
				if r != nil {
					r(s)
				}
				if r1 != nil {
					r1(s)
				}
			}
		}
	}
	return ret
}
func (t SQL) onDriverOpen(s SQLDriverOpenStartInfo) func(SQLDriverOpenDoneInfo) {
	fn := t.OnDriverOpen
	if fn == nil {
		return func(SQLDriverOpenDoneInfo) {
			return
		}
	}
	res := fn(s)
	if res == nil {
		return func(SQLDriverOpenDoneInfo) {
			return
		}
	}
	return res
}
func (t SQL) onConnectorConnect(s SQLConnectorConnectStartInfo) func(SQLConnectorConnectDoneInfo) {
	fn := t.OnConnectorConnect
	if fn == nil {
		return func(SQLConnectorConnectDoneInfo) {
			return
		}
	}
	res := fn(s)
	if res == nil {
		return func(SQLConnectorConnectDoneInfo) {
			return
		}
	}
	return res
}
func (t SQL) onConnPrepare(s SQLConnPrepareStartInfo) func(SQLConnPrepareDoneInfo) {
	fn := t.OnConnPrepare
	if fn == nil {
		return func(SQLConnPrepareDoneInfo) {
			return
		}
	}
	res := fn(s)
	if res == nil {
		return func(SQLConnPrepareDoneInfo) {
			return
		}
	}
	return res
}
func (t SQL) onConnClose(s SQLConnCloseStartInfo) func(SQLConnCloseDoneInfo) {
	fn := t.OnConnClose
	if fn == nil {
		return func(SQLConnCloseDoneInfo) {
			return
		}
	}
	res := fn(s)
	if res == nil {
		return func(SQLConnCloseDoneInfo) {
			return
		}
	}
	return res
}
func (t SQL) onConnBeginTx(s SQLConnBeginTxStartInfo) func(SQLConnBeginTxDoneInfo) {
	fn := t.OnConnBeginTx
	if fn == nil {
		return func(SQLConnBeginTxDoneInfo) {
			return
		}
	}
	res := fn(s)
	if res == nil {
		return func(SQLConnBeginTxDoneInfo) {
			return
		}
	}
	return res
}
func (t SQL) onConnQueryContext(s SQLConnQueryContextStartInfo) func(SQLConnQueryContextDoneInfo) {
	fn := t.OnConnQueryContext
	if fn == nil {
		return func(SQLConnQueryContextDoneInfo) {
			return
		}
	}
	res := fn(s)
	if res == nil {
		return func(SQLConnQueryContextDoneInfo) {
			return
		}
	}
	return res
}
func (t SQL) onConnExecContext(s SQLConnExecContextStartInfo) func(SQLConnExecContextDoneInfo) {
	fn := t.OnConnExecContext
	if fn == nil {
		return func(SQLConnExecContextDoneInfo) {
			return
		}
	}
	res := fn(s)
	if res == nil {
		return func(SQLConnExecContextDoneInfo) {
			return
		}
	}
	return res
}
func (t SQL) onTxCommit(s SQLTxCommitStartInfo) func(SQLTxCommitDoneInfo) {
	fn := t.OnTxCommit
	if fn == nil {
		return func(SQLTxCommitDoneInfo) {
			return
		}
	}
	res := fn(s)
	if res == nil {
		return func(SQLTxCommitDoneInfo) {
			return
		}
	}
	return res
}
func (t SQL) onTxRollback(s SQLTxRollbackStartInfo) func(SQLTxRollbackDoneInfo) {
	fn := t.OnTxRollback
	if fn == nil {
		return func(SQLTxRollbackDoneInfo) {
			return
		}
	}
	res := fn(s)
	if res == nil {
		return func(SQLTxRollbackDoneInfo) {
			return
		}
	}
	return res
}
func (t SQL) onStmtQueryContext(s SQLStmtQueryContextStartInfo) func(SQLStmtQueryContextDoneInfo) {
	fn := t.OnStmtQueryContext
	if fn == nil {
		return func(SQLStmtQueryContextDoneInfo) {
			return
		}
	}
	res := fn(s)
	if res == nil {
		return func(SQLStmtQueryContextDoneInfo) {
			return
		}
	}
	return res
}
func (t SQL) onStmtExecContext(s SQLStmtExecContextStartInfo) func(SQLStmtExecContextDoneInfo) {
	fn := t.OnStmtExecContext
	if fn == nil {
		return func(SQLStmtExecContextDoneInfo) {
			return
		}
	}
	res := fn(s)
	if res == nil {
		return func(SQLStmtExecContextDoneInfo) {
			return
		}
	}
	return res
}
func (t SQL) onStmtClose(s SQLStmtCloseStartInfo) func(SQLStmtCloseDoneInfo) {
	fn := t.OnStmtClose
	if fn == nil {
		return func(SQLStmtCloseDoneInfo) {
			return
		}
	}
	res := fn(s)
	if res == nil {
		return func(SQLStmtCloseDoneInfo) {
			return
		}
	}
	return res
}
func SQLOnDriverOpen(t SQL, name string) func(error) {
	var p SQLDriverOpenStartInfo
	p.Name = name
	res := t.onDriverOpen(p)
	return func(e error) {
		var p SQLDriverOpenDoneInfo
		p.Error = e
		res(p)
	}
}
func SQLOnConnectorConnect(t SQL, c *context.Context) func(error) {
	var p SQLConnectorConnectStartInfo
	p.Context = c
	res := t.onConnectorConnect(p)
	return func(e error) {
		var p SQLConnectorConnectDoneInfo
		p.Error = e
		res(p)
	}
}
func SQLOnConnPrepare(t SQL, c *context.Context, query string) func(error) {
	var p SQLConnPrepareStartInfo
	p.Context = c
	p.Query = query
	res := t.onConnPrepare(p)
	return func(e error) {
		var p SQLConnPrepareDoneInfo
		p.Error = e
		res(p)
	}
}
func SQLOnConnClose(t SQL) func(error) {
	var p SQLConnCloseStartInfo
	res := t.onConnClose(p)
	return func(e error) {
		var p SQLConnCloseDoneInfo
		p.Error = e
		res(p)
	}
}
func SQLOnConnBeginTx(t SQL, c *context.Context) func(error) {
	var p SQLConnBeginTxStartInfo
	p.Context = c
	res := t.onConnBeginTx(p)
	return func(e error) {
		var p SQLConnBeginTxDoneInfo
		p.Error = e
		res(p)
	}
}
func SQLOnConnQueryContext(t SQL, c *context.Context, query string) func(error) {
	var p SQLConnQueryContextStartInfo
	p.Context = c
	p.Query = query
	res := t.onConnQueryContext(p)
	return func(e error) {
		var p SQLConnQueryContextDoneInfo
		p.Error = e
		res(p)
	}
}
func SQLOnConnExecContext(t SQL, c *context.Context, query string) func(error) {
	var p SQLConnExecContextStartInfo
	p.Context = c
	p.Query = query
	res := t.onConnExecContext(p)
	return func(e error) {
		var p SQLConnExecContextDoneInfo
		p.Error = e
		res(p)
	}
}
func SQLOnTxCommit(t SQL) func(error) {
	var p SQLTxCommitStartInfo
	res := t.onTxCommit(p)
	return func(e error) {
		var p SQLTxCommitDoneInfo
		p.Error = e
		res(p)
	}
}
func SQLOnTxRollback(t SQL) func(error) {
	var p SQLTxRollbackStartInfo
	res := t.onTxRollback(p)
	return func(e error) {
		var p SQLTxRollbackDoneInfo
		p.Error = e
		res(p)
	}
}
func SQLOnStmtQueryContext(t SQL, c *context.Context, query string) func(error) {
	var p SQLStmtQueryContextStartInfo
	p.Context = c
	p.Query = query
	res := t.onStmtQueryContext(p)
	return func(e error) {
		var p SQLStmtQueryContextDoneInfo
		p.Error = e
		res(p)
	}
}
func SQLOnStmtExecContext(t SQL, c *context.Context) func(error) {
	var p SQLStmtExecContextStartInfo
	p.Context = c
	res := t.onStmtExecContext(p)
	return func(e error) {
		var p SQLStmtExecContextDoneInfo
		p.Error = e
		res(p)
	}
}
func SQLOnStmtClose(t SQL, c *context.Context, query string) func(error) {
	var p SQLStmtCloseStartInfo
	p.Context = c
	p.Query = query
	res := t.onStmtClose(p)
	return func(e error) {
		var p SQLStmtCloseDoneInfo
		p.Error = e
		res(p)
	}
}
