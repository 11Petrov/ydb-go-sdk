// Code generated by gtrace. DO NOT EDIT.

package ydbsql

import (
	"context"
)

// Compose returns a new Trace which has functional fields composed
// both from t and x.
func (t Trace) Compose(x Trace) (ret Trace) {
	switch {
	case t.OnDial == nil:
		ret.OnDial = x.OnDial
	case x.OnDial == nil:
		ret.OnDial = t.OnDial
	default:
		h1 := t.OnDial
		h2 := x.OnDial
		ret.OnDial = func(d DialStartInfo) func(DialDoneInfo) {
			r1 := h1(d)
			r2 := h2(d)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(d DialDoneInfo) {
					r1(d)
					r2(d)
				}
			}
		}
	}
	return ret
}
func (t Trace) onDial(d DialStartInfo) func(DialDoneInfo) {
	fn := t.OnDial
	if fn == nil {
		return func(DialDoneInfo) {
			return
		}
	}
	res := fn(d)
	if res == nil {
		return func(DialDoneInfo) {
			return
		}
	}
	return res
}
func traceOnDial(t Trace, c context.Context) func(context.Context, error) {
	var p DialStartInfo
	p.Context = c
	res := t.onDial(p)
	return func(c context.Context, e error) {
		var p DialDoneInfo
		p.Context = c
		p.Error = e
		res(p)
	}
}
