// Code generated by gtrace. DO NOT EDIT.

// +build !gtrace

package test

import (
	"context"
)

// Compose returns a new BuildTagTrace which has functional fields composed
// both from t and x.
func (t BuildTagTrace) Compose(x BuildTagTrace) (ret BuildTagTrace) {
	switch {
	case t.OnSomethingA == nil:
		ret.OnSomethingA = x.OnSomethingA
	case x.OnSomethingA == nil:
		ret.OnSomethingA = t.OnSomethingA
	default:
		h1 := t.OnSomethingA
		h2 := x.OnSomethingA
		ret.OnSomethingA = func() func() {
			r1 := h1()
			r2 := h2()
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func() {
					r1()
					r2()
				}
			}
		}
	}
	switch {
	case t.OnSomethingB == nil:
		ret.OnSomethingB = x.OnSomethingB
	case x.OnSomethingB == nil:
		ret.OnSomethingB = t.OnSomethingB
	default:
		h1 := t.OnSomethingB
		h2 := x.OnSomethingB
		ret.OnSomethingB = func(in0 int8, in1 int16) func(int32, int64) {
			r1 := h1(in0, in1)
			r2 := h2(in0, in1)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(in0 int32, in1 int64) {
					r1(in0, in1)
					r2(in0, in1)
				}
			}
		}
	}
	switch {
	case t.OnSomethingC == nil:
		ret.OnSomethingC = x.OnSomethingC
	case x.OnSomethingC == nil:
		ret.OnSomethingC = t.OnSomethingC
	default:
		h1 := t.OnSomethingC
		h2 := x.OnSomethingC
		ret.OnSomethingC = func(in0 Type) func(Type) {
			r1 := h1(in0)
			r2 := h2(in0)
			switch {
			case r1 == nil:
				return r2
			case r2 == nil:
				return r1
			default:
				return func(in0 Type) {
					r1(in0)
					r2(in0)
				}
			}
		}
	}
	return ret
}

type buildTagTraceContextKey struct{}

// WithBuildTagTrace returns context which has associated BuildTagTrace with it.
func WithBuildTagTrace(ctx context.Context, t BuildTagTrace) context.Context {
	return context.WithValue(ctx,
		buildTagTraceContextKey{},
		ContextBuildTagTrace(ctx).Compose(t),
	)
}

// ContextBuildTagTrace returns BuildTagTrace associated with ctx.
// If there is no BuildTagTrace associated with ctx then zero value 
// of BuildTagTrace is returned.
func ContextBuildTagTrace(ctx context.Context) BuildTagTrace {
	t, _ := ctx.Value(buildTagTraceContextKey{}).(BuildTagTrace)
	return t
}

func gtraceNoopDe11bf52() {
}
func (BuildTagTrace) onSomethingA(context.Context) func() {
	return gtraceNoopDe11bf52
}
func gtraceNoop61afed37(int32, int64) {
}
func (BuildTagTrace) onSomethingB(context.Context, int8, int16) func(int32, int64) {
	return gtraceNoop61afed37
}
func gtraceNoop8bdd2eba(Type) {
}
func (BuildTagTrace) onSomethingC(context.Context, Type) func(Type) {
	return gtraceNoop8bdd2eba
}
func gtraceNoopDe11bf521() {
}
func buildTagTraceOnSomethingA(context.Context, BuildTagTrace) func() {
	return gtraceNoopDe11bf521
}
func gtraceNoop61afed371(int32, int64) {
}
func buildTagTraceOnSomethingB(context.Context, BuildTagTrace, int8, int16) func(int32, int64) {
	return gtraceNoop61afed371
}
func gtraceNoop8bdd2eba1(string, int, bool, error) {
}
func buildTagTraceOnSomethingC(context.Context, BuildTagTrace, string, int, bool, error) func(string, int, bool, error) {
	return gtraceNoop8bdd2eba1
}
